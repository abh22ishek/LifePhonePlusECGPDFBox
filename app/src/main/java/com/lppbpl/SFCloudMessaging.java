/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Thu May 02 15:16:35 IST 2013.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class SFCloudMessaging.
 */
public final class SFCloudMessaging extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The get data request. */
	private final GetData getDataRequest;

	/** The Constant fieldNumberGetDataRequest. */
	private static final int fieldNumberGetDataRequest = 2;

	/** The has get data request. */
	private final boolean hasGetDataRequest;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for SFCloudMessaging.
	 * @param builder Builder
	 */
	private SFCloudMessaging(final Builder builder) {
		if (true) {
			this.getDataRequest = builder.getDataRequest;
			this.hasGetDataRequest = builder.hasGetDataRequest;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				"");
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The get data request. */
		private GetData getDataRequest;

		/** The has get data request. */
		private boolean hasGetDataRequest = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setGetDataRequest.
		 * @param getDataRequest GetData
		 * @return Builder
		 */
		public Builder setGetDataRequest(final GetData getDataRequest) {
			this.getDataRequest = getDataRequest;
			this.hasGetDataRequest = true;
			return this;
		}

		/**
		 * Method build.
		 * @return SFCloudMessaging
		 */
		public SFCloudMessaging build() {
			return new SFCloudMessaging(this);
		}
	}

	/**
	 * Method getGetDataRequest.
	 * @return GetData
	 */
	public GetData getGetDataRequest() {
		return getDataRequest;
	}

	/**
	 * Method hasGetDataRequest.
	 * @return boolean
	 */
	public boolean hasGetDataRequest() {
		return hasGetDataRequest;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasGetDataRequest) retValue += "getDataRequest = " + this.getDataRequest + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasGetDataRequest) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberGetDataRequest, getDataRequest.computeSize());

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasGetDataRequest) { writer.writeMessage(fieldNumberGetDataRequest, getDataRequest.computeSize()); getDataRequest.writeFields(writer); }
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return SFCloudMessaging
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static SFCloudMessaging parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = SFCloudMessaging.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberGetDataRequest) {
			java.util.Vector vcGetDataRequest = reader.readMessages(fieldNumberGetDataRequest);
			for (int i = 0; i < vcGetDataRequest.size(); i++) {
				byte[] eachBinData = (byte[]) vcGetDataRequest.elementAt(i);
				GetData.Builder builderGetDataRequest = GetData.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolGetDataRequest = true;
				int nestedFieldGetDataRequest = -1;
				while (boolGetDataRequest) {
					nestedFieldGetDataRequest = getNextFieldNumber(innerInputReader);
					boolGetDataRequest = GetData.populateBuilderWithField(innerInputReader, builderGetDataRequest, nestedFieldGetDataRequest);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setGetDataRequest(builderGetDataRequest.build());
			}

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		SFCloudMessaging.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return SFCloudMessaging
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static SFCloudMessaging parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return SFCloudMessaging
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static SFCloudMessaging parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return SFCloudMessaging
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static SFCloudMessaging parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}