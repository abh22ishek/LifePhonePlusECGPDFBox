/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Wed Jan 08 14:21:10 IST 2014.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class EcgMultipleLead.
 */
public final class EcgMultipleLead extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The ecg strip. */
	private final java.util.Vector ecgStrip;

	/** The Constant fieldNumberEcgStrip. */
	private static final int fieldNumberEcgStrip = 1;

	/** The lead. */
	private final int lead;

	/** The Constant fieldNumberLead. */
	private static final int fieldNumberLead = 2;

	/** The timestamp. */
	private final long timestamp;

	/** The Constant fieldNumberTimestamp. */
	private static final int fieldNumberTimestamp = 3;

	/** The has timestamp. */
	private final boolean hasTimestamp;

	/** The step num. */
	private final int stepNum;

	/** The Constant fieldNumberStepNum. */
	private static final int fieldNumberStepNum = 4;

	/** The has step num. */
	private final boolean hasStepNum;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for EcgMultipleLead.
	 * @param builder Builder
	 */
	private EcgMultipleLead(final Builder builder) {
		if (builder.hasLead ) {
			this.ecgStrip = builder.ecgStrip;
			this.lead = builder.lead;
			this.timestamp = builder.timestamp;
			this.hasTimestamp = builder.hasTimestamp;
			this.stepNum = builder.stepNum;
			this.hasStepNum = builder.hasStepNum;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" lead:" + builder.hasLead + "");
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The ecg strip. */
		private java.util.Vector ecgStrip = new java.util.Vector();

		/** The has ecg strip. */
		private boolean hasEcgStrip = false;

		/** The lead. */
		private int lead;

		/** The has lead. */
		private boolean hasLead = false;

		/** The timestamp. */
		private long timestamp;

		/** The has timestamp. */
		private boolean hasTimestamp = false;

		/** The step num. */
		private int stepNum;

		/** The has step num. */
		private boolean hasStepNum = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setEcgStrip.
		 * @param ecgStrip java.util.Vector
		 * @return Builder
		 */
		public Builder setEcgStrip(final java.util.Vector ecgStrip) {
			if(!hasEcgStrip) {
				hasEcgStrip = true;
			}
			this.ecgStrip = ecgStrip;
			return this;
		}


		/**
		 * Method addElementEcgStrip.
		 * @param element int
		 * @return Builder
		 */
		public Builder addElementEcgStrip(final int element) {
			if(!hasEcgStrip) {
				hasEcgStrip = true;
			}
			ecgStrip.addElement(new Integer(element));
			return this;
		}

		/**
		 * Method setLead.
		 * @param lead int
		 * @return Builder
		 */
		public Builder setLead(final int lead) {
			this.lead = lead;
			this.hasLead = true;
			return this;
		}

		/**
		 * Method setTimestamp.
		 * @param timestamp long
		 * @return Builder
		 */
		public Builder setTimestamp(final long timestamp) {
			this.timestamp = timestamp;
			this.hasTimestamp = true;
			return this;
		}

		/**
		 * Method setStepNum.
		 * @param stepNum int
		 * @return Builder
		 */
		public Builder setStepNum(final int stepNum) {
			this.stepNum = stepNum;
			this.hasStepNum = true;
			return this;
		}

		/**
		 * Method build.
		 * @return EcgMultipleLead
		 */
		public EcgMultipleLead build() {
			return new EcgMultipleLead(this);
		}
	}

	/**
	 * Method getEcgStrip.
	 * @return java.util.Vector
	 */
	public java.util.Vector getEcgStrip() {
		return ecgStrip;
	}

	/**
	 * Method getLead.
	 * @return int
	 */
	public int getLead() {
		return lead;
	}

	/**
	 * Method getTimestamp.
	 * @return long
	 */
	public long getTimestamp() {
		return timestamp;
	}

	/**
	 * Method hasTimestamp.
	 * @return boolean
	 */
	public boolean hasTimestamp() {
		return hasTimestamp;
	}

	/**
	 * Method getStepNum.
	 * @return int
	 */
	public int getStepNum() {
		return stepNum;
	}

	/**
	 * Method hasStepNum.
	 * @return boolean
	 */
	public boolean hasStepNum() {
		return hasStepNum;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "ecgStrip = " + this.ecgStrip + TAB;
		retValue += "lead = " + this.lead + TAB;
		if(hasTimestamp) retValue += "timestamp = " + this.timestamp + TAB;
		if(hasStepNum) retValue += "stepNum = " + this.stepNum + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberEcgStrip, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_SINT, ecgStrip);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberLead, lead);
		if(hasTimestamp) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberTimestamp, timestamp);
		if(hasStepNum) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberStepNum, stepNum);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeList(fieldNumberEcgStrip, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_SINT, ecgStrip);
		writer.writeInt(fieldNumberLead, lead);
		if(hasTimestamp) writer.writeLong(fieldNumberTimestamp, timestamp);
		if(hasStepNum) writer.writeInt(fieldNumberStepNum, stepNum);
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return EcgMultipleLead
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static EcgMultipleLead parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = EcgMultipleLead.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberEcgStrip) {
			builder.addElementEcgStrip(reader.readSInt(fieldNumber));

		} else if (fieldNumber == fieldNumberLead) {
			builder.setLead(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberTimestamp) {
			builder.setTimestamp(reader.readLong(fieldNumber));

		} else if (fieldNumber == fieldNumberStepNum) {
			builder.setStepNum(reader.readInt(fieldNumber));

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		EcgMultipleLead.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return EcgMultipleLead
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static EcgMultipleLead parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return EcgMultipleLead
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static EcgMultipleLead parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return EcgMultipleLead
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static EcgMultipleLead parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}