/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Wed Feb 27 08:53:38 IST 2013.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class TATCategoryList.
 */
public final class TATCategoryList extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The categories. */
	private final java.util.Vector categories;

	/** The Constant fieldNumberCategories. */
	private static final int fieldNumberCategories = 1;

	/** The balance amount. */
	private final long balanceAmount;

	/** The Constant fieldNumberBalanceAmount. */
	private static final int fieldNumberBalanceAmount = 10;

	/** The has balance amount. */
	private final boolean hasBalanceAmount;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for TATCategoryList.
	 * @param builder Builder
	 */
	private TATCategoryList(final Builder builder) {
		if (true) {
			this.categories = builder.categories;
			this.balanceAmount = builder.balanceAmount;
			this.hasBalanceAmount = builder.hasBalanceAmount;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				"");
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The categories. */
		private java.util.Vector categories = new java.util.Vector();

		/** The has categories. */
		private boolean hasCategories = false;

		/** The balance amount. */
		private long balanceAmount;

		/** The has balance amount. */
		private boolean hasBalanceAmount = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setCategories.
		 * @param categories java.util.Vector
		 * @return Builder
		 */
		public Builder setCategories(final java.util.Vector categories) {
			if(!hasCategories) {
				hasCategories = true;
			}
			this.categories = categories;
			return this;
		}


		/**
		 * Method addElementCategories.
		 * @param element TATCategory
		 * @return Builder
		 */
		public Builder addElementCategories(final TATCategory element) {
			if(!hasCategories) {
				hasCategories = true;
			}
			categories.addElement(element);
			return this;
		}

		/**
		 * Method setBalanceAmount.
		 * @param balanceAmount long
		 * @return Builder
		 */
		public Builder setBalanceAmount(final long balanceAmount) {
			this.balanceAmount = balanceAmount;
			this.hasBalanceAmount = true;
			return this;
		}

		/**
		 * Method build.
		 * @return TATCategoryList
		 */
		public TATCategoryList build() {
			return new TATCategoryList(this);
		}
	}

	/**
	 * Method getCategories.
	 * @return java.util.Vector
	 */
	public java.util.Vector getCategories() {
		return categories;
	}

	/**
	 * Method getBalanceAmount.
	 * @return long
	 */
	public long getBalanceAmount() {
		return balanceAmount;
	}

	/**
	 * Method hasBalanceAmount.
	 * @return boolean
	 */
	public boolean hasBalanceAmount() {
		return hasBalanceAmount;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "categories = " + this.categories + TAB;
		if(hasBalanceAmount) retValue += "balanceAmount = " + this.balanceAmount + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		if(hasBalanceAmount) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberBalanceAmount, balanceAmount);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberCategories, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, categories);

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeList(fieldNumberCategories, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, categories);
		if(hasBalanceAmount) writer.writeLong(fieldNumberBalanceAmount, balanceAmount);
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return TATCategoryList
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static TATCategoryList parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = TATCategoryList.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberCategories) {
			java.util.Vector vcCategories = reader.readMessages(fieldNumberCategories);
			for (int i = 0; i < vcCategories.size(); i++) {
				byte[] eachBinData = (byte[]) vcCategories.elementAt(i);
				TATCategory.Builder builderCategories = TATCategory.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolCategories = true;
				int nestedFieldCategories = -1;
				while (boolCategories) {
					nestedFieldCategories = getNextFieldNumber(innerInputReader);
					boolCategories = TATCategory.populateBuilderWithField(innerInputReader, builderCategories, nestedFieldCategories);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.addElementCategories(builderCategories.build());
			}

		} else if (fieldNumber == fieldNumberBalanceAmount) {
			builder.setBalanceAmount(reader.readLong(fieldNumber));

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		TATCategoryList.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return TATCategoryList
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static TATCategoryList parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return TATCategoryList
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static TATCategoryList parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return TATCategoryList
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static TATCategoryList parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}