/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Thu May 02 15:16:35 IST 2013.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class Response.
 */
public final class Response extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The interface version. */
	private final String interfaceVersion;

	/** The Constant fieldNumberInterfaceVersion. */
	private static final int fieldNumberInterfaceVersion = 1000;

	/** The has interface version. */
	private final boolean hasInterfaceVersion;

	/** The response type. */
	private final int responseType;

	/** The Constant fieldNumberResponseType. */
	private static final int fieldNumberResponseType = 1;

	/** The measurement type. */
	private final int measurementType;

	/** The Constant fieldNumberMeasurementType. */
	private static final int fieldNumberMeasurementType = 2;

	/** The has measurement type. */
	private final boolean hasMeasurementType;

	/** The sequence no. */
	private final int sequenceNo;

	/** The Constant fieldNumberSequenceNo. */
	private static final int fieldNumberSequenceNo = 3;

	/** The has sequence no. */
	private final boolean hasSequenceNo;

	/** The timestamp. */
	private final long timestamp;

	/** The Constant fieldNumberTimestamp. */
	private static final int fieldNumberTimestamp = 4;

	/** The has timestamp. */
	private final boolean hasTimestamp;

	/** The service req. */
	private final int serviceReq;

	/** The Constant fieldNumberServiceReq. */
	private static final int fieldNumberServiceReq = 6;

	/** The has service req. */
	private final boolean hasServiceReq;

	/** The ecg data. */
	private final EcgData ecgData;

	/** The Constant fieldNumberEcgData. */
	private static final int fieldNumberEcgData = 20;

	/** The has ecg data. */
	private final boolean hasEcgData;

	/** The hr data. */
	private final HrData hrData;

	/** The Constant fieldNumberHrData. */
	private static final int fieldNumberHrData = 21;

	/** The has hr data. */
	private final boolean hasHrData;

	/** The act data. */
	private final ActivityData actData;

	/** The Constant fieldNumberActData. */
	private static final int fieldNumberActData = 22;

	/** The has act data. */
	private final boolean hasActData;

	/** The temp data. */
	private final TemperatureData tempData;

	/** The Constant fieldNumberTempData. */
	private static final int fieldNumberTempData = 23;

	/** The has temp data. */
	private final boolean hasTempData;

	/** The bg data. */
	private final BgData bgData;

	/** The Constant fieldNumberBgData. */
	private static final int fieldNumberBgData = 24;

	/** The has bg data. */
	private final boolean hasBgData;

	/** The dev data. */
	private final DeviceData devData;

	/** The Constant fieldNumberDevData. */
	private static final int fieldNumberDevData = 50;

	/** The has dev data. */
	private final boolean hasDevData;

	/** The err code. */
	private final int errCode;

	/** The Constant fieldNumberErrCode. */
	private static final int fieldNumberErrCode = 70;

	/** The has err code. */
	private final boolean hasErrCode;

	/** The stt code. */
	private final int sttCode;

	/** The Constant fieldNumberSttCode. */
	private static final int fieldNumberSttCode = 71;

	/** The has stt code. */
	private final boolean hasSttCode;

	/** The test response. */
	private final TestResponse testResponse;

	/** The Constant fieldNumberTestResponse. */
	private static final int fieldNumberTestResponse = 80;

	/** The has test response. */
	private final boolean hasTestResponse;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for Response.
	 * @param builder Builder
	 */
	private Response(final Builder builder) {
		if (builder.hasResponseType ) {
			this.interfaceVersion = builder.interfaceVersion;
			this.hasInterfaceVersion = builder.hasInterfaceVersion;
			this.responseType = builder.responseType;
			this.measurementType = builder.measurementType;
			this.hasMeasurementType = builder.hasMeasurementType;
			this.sequenceNo = builder.sequenceNo;
			this.hasSequenceNo = builder.hasSequenceNo;
			this.timestamp = builder.timestamp;
			this.hasTimestamp = builder.hasTimestamp;
			this.serviceReq = builder.serviceReq;
			this.hasServiceReq = builder.hasServiceReq;
			this.ecgData = builder.ecgData;
			this.hasEcgData = builder.hasEcgData;
			this.hrData = builder.hrData;
			this.hasHrData = builder.hasHrData;
			this.actData = builder.actData;
			this.hasActData = builder.hasActData;
			this.tempData = builder.tempData;
			this.hasTempData = builder.hasTempData;
			this.bgData = builder.bgData;
			this.hasBgData = builder.hasBgData;
			this.devData = builder.devData;
			this.hasDevData = builder.hasDevData;
			this.errCode = builder.errCode;
			this.hasErrCode = builder.hasErrCode;
			this.sttCode = builder.sttCode;
			this.hasSttCode = builder.hasSttCode;
			this.testResponse = builder.testResponse;
			this.hasTestResponse = builder.hasTestResponse;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" responseType:" + builder.hasResponseType + "");
		}
	}

	/**
	 * The Class ResStatusCode.
	 */
	public static class ResStatusCode {

		/** The Constant STT_MES_STEP_STARTED. */
		public static final int STT_MES_STEP_STARTED = 1;

		/** The Constant CLIENT_SHUTDOWN. */
		public static final int CLIENT_SHUTDOWN = 70;

		/** The Constant STT_MES_STEP_COMPLETED. */
		public static final int STT_MES_STEP_COMPLETED = 2;

		/** The Constant STT_MES_INPROGRESS. */
		public static final int STT_MES_INPROGRESS = 10;

		/** The Constant STT_MES_IDLE. */
		public static final int STT_MES_IDLE = 11;

		/** The Constant STT_ERROR_CLEARED. */
		public static final int STT_ERROR_CLEARED = 12;

		/** The Constant STT_MES_BG_STRIP_INSERTED. */
		public static final int STT_MES_BG_STRIP_INSERTED = 30;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 1) {
				retValue = "STT_MES_STEP_STARTED";

			} else if (value == 70) {
				retValue = "CLIENT_SHUTDOWN";

			} else if (value == 2) {
				retValue = "STT_MES_STEP_COMPLETED";

			} else if (value == 10) {
				retValue = "STT_MES_INPROGRESS";

			} else if (value == 11) {
				retValue = "STT_MES_IDLE";

			} else if (value == 12) {
				retValue = "STT_ERROR_CLEARED";

			} else if (value == 30) {
				retValue = "STT_MES_BG_STRIP_INSERTED";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class ResErrorCode.
	 */
	public static class ResErrorCode {

		/** The Constant MES_BG_NOT_ENOUGH_BLOOD. */
		public static final int MES_BG_NOT_ENOUGH_BLOOD = 34;

		/** The Constant MES_SENSOR_ERROR. */
		public static final int MES_SENSOR_ERROR = 1;

		/** The Constant MES_BG_BATTERY_LOW. */
		public static final int MES_BG_BATTERY_LOW = 35;

		/** The Constant MES_REQUEST_PARAM_ERROR. */
		public static final int MES_REQUEST_PARAM_ERROR = 2;

		/** The Constant MES_BG_BLOOD_APPLIED_TOO_SOON. */
		public static final int MES_BG_BLOOD_APPLIED_TOO_SOON = 32;

		/** The Constant MES_ALREADY_RUNNING. */
		public static final int MES_ALREADY_RUNNING = 3;

		/** The Constant MES_BG_STRIP_CONTAMINATED. */
		public static final int MES_BG_STRIP_CONTAMINATED = 33;

		/** The Constant MES_BG_LOW_AMBIENT_TEMPERATURE. */
		public static final int MES_BG_LOW_AMBIENT_TEMPERATURE = 38;

		/** The Constant MES_ECG_NO_LEAD_CONFIG. */
		public static final int MES_ECG_NO_LEAD_CONFIG = 4;

		/** The Constant MES_BG_GLUCOSE_HIGH. */
		public static final int MES_BG_GLUCOSE_HIGH = 39;

		/** The Constant MES_ECG_ERROR_USR_INTERRUPT. */
		public static final int MES_ECG_ERROR_USR_INTERRUPT = 5;

		/** The Constant MES_ECG_QUALITY_POOR. */
		public static final int MES_ECG_QUALITY_POOR = 6;

		/** The Constant MES_BG_WRONG_STRIP_TYPE. */
		public static final int MES_BG_WRONG_STRIP_TYPE = 36;

		/** The Constant MES_BG_HIGH_AMBIENT_TEMPERATURE. */
		public static final int MES_BG_HIGH_AMBIENT_TEMPERATURE = 37;

		/** The Constant MES_BG_GLUCOSE_LOW. */
		public static final int MES_BG_GLUCOSE_LOW = 40;

		/** The Constant MES_BG_STRIP_ALREADY_INSERTED. */
		public static final int MES_BG_STRIP_ALREADY_INSERTED = 41;

		/** The Constant MES_BG_STRIP_REMOVED_TOO_SOON. */
		public static final int MES_BG_STRIP_REMOVED_TOO_SOON = 31;

		/** The Constant MES_TIMEOUT. */
		public static final int MES_TIMEOUT = 60;

		/** The Constant MES_BG_SELF_CHECK_ERROR. */
		public static final int MES_BG_SELF_CHECK_ERROR = 30;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 34) {
				retValue = "MES_BG_NOT_ENOUGH_BLOOD";

			} else if (value == 1) {
				retValue = "MES_SENSOR_ERROR";

			} else if (value == 35) {
				retValue = "MES_BG_BATTERY_LOW";

			} else if (value == 2) {
				retValue = "MES_REQUEST_PARAM_ERROR";

			} else if (value == 32) {
				retValue = "MES_BG_BLOOD_APPLIED_TOO_SOON";

			} else if (value == 3) {
				retValue = "MES_ALREADY_RUNNING";

			} else if (value == 33) {
				retValue = "MES_BG_STRIP_CONTAMINATED";

			} else if (value == 38) {
				retValue = "MES_BG_LOW_AMBIENT_TEMPERATURE";

			} else if (value == 4) {
				retValue = "MES_ECG_NO_LEAD_CONFIG";

			} else if (value == 39) {
				retValue = "MES_BG_GLUCOSE_HIGH";

			} else if (value == 5) {
				retValue = "MES_ECG_ERROR_USR_INTERRUPT";

			} else if (value == 6) {
				retValue = "MES_ECG_QUALITY_POOR";

			} else if (value == 36) {
				retValue = "MES_BG_WRONG_STRIP_TYPE";

			} else if (value == 37) {
				retValue = "MES_BG_HIGH_AMBIENT_TEMPERATURE";

			} else if (value == 40) {
				retValue = "MES_BG_GLUCOSE_LOW";

			} else if (value == 41) {
				retValue = "MES_BG_STRIP_ALREADY_INSERTED";

			} else if (value == 31) {
				retValue = "MES_BG_STRIP_REMOVED_TOO_SOON";

			} else if (value == 60) {
				retValue = "MES_TIMEOUT";

			} else if (value == 30) {
				retValue = "MES_BG_SELF_CHECK_ERROR";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class ServiceRequest.
	 */
	public static class ServiceRequest {

		/** The Constant DataLogging. */
		public static final int DataLogging = 1;

		/** The Constant CardioConsult. */
		public static final int CardioConsult = 2;

		/** The Constant DiabetesConsult. */
		public static final int DiabetesConsult = 3;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 1) {
				retValue = "DataLogging";

			} else if (value == 2) {
				retValue = "CardioConsult";

			} else if (value == 3) {
				retValue = "DiabetesConsult";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The interface version. */
		private String interfaceVersion;

		/** The has interface version. */
		private boolean hasInterfaceVersion = false;

		/** The response type. */
		private int responseType;

		/** The has response type. */
		private boolean hasResponseType = false;

		/** The measurement type. */
		private int measurementType;

		/** The has measurement type. */
		private boolean hasMeasurementType = false;

		/** The sequence no. */
		private int sequenceNo;

		/** The has sequence no. */
		private boolean hasSequenceNo = false;

		/** The timestamp. */
		private long timestamp;

		/** The has timestamp. */
		private boolean hasTimestamp = false;

		/** The service req. */
		private int serviceReq;

		/** The has service req. */
		private boolean hasServiceReq = false;

		/** The ecg data. */
		private EcgData ecgData;

		/** The has ecg data. */
		private boolean hasEcgData = false;

		/** The hr data. */
		private HrData hrData;

		/** The has hr data. */
		private boolean hasHrData = false;

		/** The act data. */
		private ActivityData actData;

		/** The has act data. */
		private boolean hasActData = false;

		/** The temp data. */
		private TemperatureData tempData;

		/** The has temp data. */
		private boolean hasTempData = false;

		/** The bg data. */
		private BgData bgData;

		/** The has bg data. */
		private boolean hasBgData = false;

		/** The dev data. */
		private DeviceData devData;

		/** The has dev data. */
		private boolean hasDevData = false;

		/** The err code. */
		private int errCode;

		/** The has err code. */
		private boolean hasErrCode = false;

		/** The stt code. */
		private int sttCode;

		/** The has stt code. */
		private boolean hasSttCode = false;

		/** The test response. */
		private TestResponse testResponse;

		/** The has test response. */
		private boolean hasTestResponse = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setInterfaceVersion.
		 * @param interfaceVersion String
		 * @return Builder
		 */
		public Builder setInterfaceVersion(final String interfaceVersion) {
			this.interfaceVersion = interfaceVersion;
			this.hasInterfaceVersion = true;
			return this;
		}

		/**
		 * Method setResponseType.
		 * @param responseType int
		 * @return Builder
		 */
		public Builder setResponseType(final int responseType) {
			this.responseType = responseType;
			this.hasResponseType = true;
			return this;
		}

		/**
		 * Method setMeasurementType.
		 * @param measurementType int
		 * @return Builder
		 */
		public Builder setMeasurementType(final int measurementType) {
			this.measurementType = measurementType;
			this.hasMeasurementType = true;
			return this;
		}

		/**
		 * Method setSequenceNo.
		 * @param sequenceNo int
		 * @return Builder
		 */
		public Builder setSequenceNo(final int sequenceNo) {
			this.sequenceNo = sequenceNo;
			this.hasSequenceNo = true;
			return this;
		}

		/**
		 * Method setTimestamp.
		 * @param timestamp long
		 * @return Builder
		 */
		public Builder setTimestamp(final long timestamp) {
			this.timestamp = timestamp;
			this.hasTimestamp = true;
			return this;
		}

		/**
		 * Method setServiceReq.
		 * @param serviceReq int
		 * @return Builder
		 */
		public Builder setServiceReq(final int serviceReq) {
			this.serviceReq = serviceReq;
			this.hasServiceReq = true;
			return this;
		}

		/**
		 * Method setEcgData.
		 * @param ecgData EcgData
		 * @return Builder
		 */
		public Builder setEcgData(final EcgData ecgData) {
			this.ecgData = ecgData;
			this.hasEcgData = true;
			return this;
		}

		/**
		 * Method setHrData.
		 * @param hrData HrData
		 * @return Builder
		 */
		public Builder setHrData(final HrData hrData) {
			this.hrData = hrData;
			this.hasHrData = true;
			return this;
		}

		/**
		 * Method setActData.
		 * @param actData ActivityData
		 * @return Builder
		 */
		public Builder setActData(final ActivityData actData) {
			this.actData = actData;
			this.hasActData = true;
			return this;
		}

		/**
		 * Method setTempData.
		 * @param tempData TemperatureData
		 * @return Builder
		 */
		public Builder setTempData(final TemperatureData tempData) {
			this.tempData = tempData;
			this.hasTempData = true;
			return this;
		}

		/**
		 * Method setBgData.
		 * @param bgData BgData
		 * @return Builder
		 */
		public Builder setBgData(final BgData bgData) {
			this.bgData = bgData;
			this.hasBgData = true;
			return this;
		}

		/**
		 * Method setDevData.
		 * @param devData DeviceData
		 * @return Builder
		 */
		public Builder setDevData(final DeviceData devData) {
			this.devData = devData;
			this.hasDevData = true;
			return this;
		}

		/**
		 * Method setErrCode.
		 * @param errCode int
		 * @return Builder
		 */
		public Builder setErrCode(final int errCode) {
			this.errCode = errCode;
			this.hasErrCode = true;
			return this;
		}

		/**
		 * Method setSttCode.
		 * @param sttCode int
		 * @return Builder
		 */
		public Builder setSttCode(final int sttCode) {
			this.sttCode = sttCode;
			this.hasSttCode = true;
			return this;
		}

		/**
		 * Method setTestResponse.
		 * @param testResponse TestResponse
		 * @return Builder
		 */
		public Builder setTestResponse(final TestResponse testResponse) {
			this.testResponse = testResponse;
			this.hasTestResponse = true;
			return this;
		}

		/**
		 * Method build.
		 * @return Response
		 */
		public Response build() {
			return new Response(this);
		}
	}

	/**
	 * Method getInterfaceVersion.
	 * @return String
	 */
	public String getInterfaceVersion() {
		return interfaceVersion;
	}

	/**
	 * Method hasInterfaceVersion.
	 * @return boolean
	 */
	public boolean hasInterfaceVersion() {
		return hasInterfaceVersion;
	}

	/**
	 * Method getResponseType.
	 * @return int
	 */
	public int getResponseType() {
		return responseType;
	}

	/**
	 * Method getMeasurementType.
	 * @return int
	 */
	public int getMeasurementType() {
		return measurementType;
	}

	/**
	 * Method hasMeasurementType.
	 * @return boolean
	 */
	public boolean hasMeasurementType() {
		return hasMeasurementType;
	}

	/**
	 * Method getSequenceNo.
	 * @return int
	 */
	public int getSequenceNo() {
		return sequenceNo;
	}

	/**
	 * Method hasSequenceNo.
	 * @return boolean
	 */
	public boolean hasSequenceNo() {
		return hasSequenceNo;
	}

	/**
	 * Method getTimestamp.
	 * @return long
	 */
	public long getTimestamp() {
		return timestamp;
	}

	/**
	 * Method hasTimestamp.
	 * @return boolean
	 */
	public boolean hasTimestamp() {
		return hasTimestamp;
	}

	/**
	 * Method getServiceReq.
	 * @return int
	 */
	public int getServiceReq() {
		return serviceReq;
	}

	/**
	 * Method hasServiceReq.
	 * @return boolean
	 */
	public boolean hasServiceReq() {
		return hasServiceReq;
	}

	/**
	 * Method getEcgData.
	 * @return EcgData
	 */
	public EcgData getEcgData() {
		return ecgData;
	}

	/**
	 * Method hasEcgData.
	 * @return boolean
	 */
	public boolean hasEcgData() {
		return hasEcgData;
	}

	/**
	 * Method getHrData.
	 * @return HrData
	 */
	public HrData getHrData() {
		return hrData;
	}

	/**
	 * Method hasHrData.
	 * @return boolean
	 */
	public boolean hasHrData() {
		return hasHrData;
	}

	/**
	 * Method getActData.
	 * @return ActivityData
	 */
	public ActivityData getActData() {
		return actData;
	}

	/**
	 * Method hasActData.
	 * @return boolean
	 */
	public boolean hasActData() {
		return hasActData;
	}

	/**
	 * Method getTempData.
	 * @return TemperatureData
	 */
	public TemperatureData getTempData() {
		return tempData;
	}

	/**
	 * Method hasTempData.
	 * @return boolean
	 */
	public boolean hasTempData() {
		return hasTempData;
	}

	/**
	 * Method getBgData.
	 * @return BgData
	 */
	public BgData getBgData() {
		return bgData;
	}

	/**
	 * Method hasBgData.
	 * @return boolean
	 */
	public boolean hasBgData() {
		return hasBgData;
	}

	/**
	 * Method getDevData.
	 * @return DeviceData
	 */
	public DeviceData getDevData() {
		return devData;
	}

	/**
	 * Method hasDevData.
	 * @return boolean
	 */
	public boolean hasDevData() {
		return hasDevData;
	}

	/**
	 * Method getErrCode.
	 * @return int
	 */
	public int getErrCode() {
		return errCode;
	}

	/**
	 * Method hasErrCode.
	 * @return boolean
	 */
	public boolean hasErrCode() {
		return hasErrCode;
	}

	/**
	 * Method getSttCode.
	 * @return int
	 */
	public int getSttCode() {
		return sttCode;
	}

	/**
	 * Method hasSttCode.
	 * @return boolean
	 */
	public boolean hasSttCode() {
		return hasSttCode;
	}

	/**
	 * Method getTestResponse.
	 * @return TestResponse
	 */
	public TestResponse getTestResponse() {
		return testResponse;
	}

	/**
	 * Method hasTestResponse.
	 * @return boolean
	 */
	public boolean hasTestResponse() {
		return hasTestResponse;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasInterfaceVersion) retValue += "interfaceVersion = " + this.interfaceVersion + TAB;
		retValue += "responseType = " + this.responseType + TAB;
		if(hasMeasurementType) retValue += "measurementType = " + this.measurementType + TAB;
		if(hasSequenceNo) retValue += "sequenceNo = " + this.sequenceNo + TAB;
		if(hasTimestamp) retValue += "timestamp = " + this.timestamp + TAB;
		if(hasServiceReq) retValue += "serviceReq = " + this.serviceReq + TAB;
		if(hasEcgData) retValue += "ecgData = " + this.ecgData + TAB;
		if(hasHrData) retValue += "hrData = " + this.hrData + TAB;
		if(hasActData) retValue += "actData = " + this.actData + TAB;
		if(hasTempData) retValue += "tempData = " + this.tempData + TAB;
		if(hasBgData) retValue += "bgData = " + this.bgData + TAB;
		if(hasDevData) retValue += "devData = " + this.devData + TAB;
		if(hasErrCode) retValue += "errCode = " + this.errCode + TAB;
		if(hasSttCode) retValue += "sttCode = " + this.sttCode + TAB;
		if(hasTestResponse) retValue += "testResponse = " + this.testResponse + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		if(hasInterfaceVersion) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberInterfaceVersion, interfaceVersion);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberResponseType, responseType);
		if(hasMeasurementType) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberMeasurementType, measurementType);
		if(hasSequenceNo) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSequenceNo, sequenceNo);
		if(hasTimestamp) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberTimestamp, timestamp);
		if(hasServiceReq) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberServiceReq, serviceReq);
		if(hasErrCode) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberErrCode, errCode);
		if(hasSttCode) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSttCode, sttCode);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasEcgData) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberEcgData, ecgData.computeSize());
		if(hasHrData) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberHrData, hrData.computeSize());
		if(hasActData) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberActData, actData.computeSize());
		if(hasTempData) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberTempData, tempData.computeSize());
		if(hasBgData) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberBgData, bgData.computeSize());
		if(hasDevData) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberDevData, devData.computeSize());
		if(hasTestResponse) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberTestResponse, testResponse.computeSize());

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasInterfaceVersion) writer.writeString(fieldNumberInterfaceVersion, interfaceVersion);
		writer.writeInt(fieldNumberResponseType, responseType);
		if(hasMeasurementType) writer.writeInt(fieldNumberMeasurementType, measurementType);
		if(hasSequenceNo) writer.writeInt(fieldNumberSequenceNo, sequenceNo);
		if(hasTimestamp) writer.writeLong(fieldNumberTimestamp, timestamp);
		if(hasServiceReq) writer.writeInt(fieldNumberServiceReq, serviceReq);
		if(hasEcgData) { writer.writeMessage(fieldNumberEcgData, ecgData.computeSize()); ecgData.writeFields(writer); }
		if(hasHrData) { writer.writeMessage(fieldNumberHrData, hrData.computeSize()); hrData.writeFields(writer); }
		if(hasActData) { writer.writeMessage(fieldNumberActData, actData.computeSize()); actData.writeFields(writer); }
		if(hasTempData) { writer.writeMessage(fieldNumberTempData, tempData.computeSize()); tempData.writeFields(writer); }
		if(hasBgData) { writer.writeMessage(fieldNumberBgData, bgData.computeSize()); bgData.writeFields(writer); }
		if(hasDevData) { writer.writeMessage(fieldNumberDevData, devData.computeSize()); devData.writeFields(writer); }
		if(hasErrCode) writer.writeInt(fieldNumberErrCode, errCode);
		if(hasSttCode) writer.writeInt(fieldNumberSttCode, sttCode);
		if(hasTestResponse) { writer.writeMessage(fieldNumberTestResponse, testResponse.computeSize()); testResponse.writeFields(writer); }
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return Response
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static Response parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = Response.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberInterfaceVersion) {
			builder.setInterfaceVersion(reader.readString(fieldNumber));

		} else if (fieldNumber == fieldNumberResponseType) {
			builder.setResponseType(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberMeasurementType) {
			builder.setMeasurementType(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberSequenceNo) {
			builder.setSequenceNo(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberTimestamp) {
			builder.setTimestamp(reader.readLong(fieldNumber));

		} else if (fieldNumber == fieldNumberServiceReq) {
			builder.setServiceReq(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberEcgData) {
			java.util.Vector vcEcgData = reader.readMessages(fieldNumberEcgData);
			for (int i = 0; i < vcEcgData.size(); i++) {
				byte[] eachBinData = (byte[]) vcEcgData.elementAt(i);
				EcgData.Builder builderEcgData = EcgData.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolEcgData = true;
				int nestedFieldEcgData = -1;
				while (boolEcgData) {
					nestedFieldEcgData = getNextFieldNumber(innerInputReader);
					boolEcgData = EcgData.populateBuilderWithField(innerInputReader, builderEcgData, nestedFieldEcgData);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setEcgData(builderEcgData.build());
			}

		} else if (fieldNumber == fieldNumberHrData) {
			java.util.Vector vcHrData = reader.readMessages(fieldNumberHrData);
			for (int i = 0; i < vcHrData.size(); i++) {
				byte[] eachBinData = (byte[]) vcHrData.elementAt(i);
				HrData.Builder builderHrData = HrData.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolHrData = true;
				int nestedFieldHrData = -1;
				while (boolHrData) {
					nestedFieldHrData = getNextFieldNumber(innerInputReader);
					boolHrData = HrData.populateBuilderWithField(innerInputReader, builderHrData, nestedFieldHrData);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setHrData(builderHrData.build());
			}

		} else if (fieldNumber == fieldNumberActData) {
			java.util.Vector vcActData = reader.readMessages(fieldNumberActData);
			for (int i = 0; i < vcActData.size(); i++) {
				byte[] eachBinData = (byte[]) vcActData.elementAt(i);
				ActivityData.Builder builderActData = ActivityData.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolActData = true;
				int nestedFieldActData = -1;
				while (boolActData) {
					nestedFieldActData = getNextFieldNumber(innerInputReader);
					boolActData = ActivityData.populateBuilderWithField(innerInputReader, builderActData, nestedFieldActData);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setActData(builderActData.build());
			}

		} else if (fieldNumber == fieldNumberTempData) {
			java.util.Vector vcTempData = reader.readMessages(fieldNumberTempData);
			for (int i = 0; i < vcTempData.size(); i++) {
				byte[] eachBinData = (byte[]) vcTempData.elementAt(i);
				TemperatureData.Builder builderTempData = TemperatureData.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolTempData = true;
				int nestedFieldTempData = -1;
				while (boolTempData) {
					nestedFieldTempData = getNextFieldNumber(innerInputReader);
					boolTempData = TemperatureData.populateBuilderWithField(innerInputReader, builderTempData, nestedFieldTempData);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setTempData(builderTempData.build());
			}

		} else if (fieldNumber == fieldNumberBgData) {
			java.util.Vector vcBgData = reader.readMessages(fieldNumberBgData);
			for (int i = 0; i < vcBgData.size(); i++) {
				byte[] eachBinData = (byte[]) vcBgData.elementAt(i);
				BgData.Builder builderBgData = BgData.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolBgData = true;
				int nestedFieldBgData = -1;
				while (boolBgData) {
					nestedFieldBgData = getNextFieldNumber(innerInputReader);
					boolBgData = BgData.populateBuilderWithField(innerInputReader, builderBgData, nestedFieldBgData);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setBgData(builderBgData.build());
			}

		} else if (fieldNumber == fieldNumberDevData) {
			java.util.Vector vcDevData = reader.readMessages(fieldNumberDevData);
			for (int i = 0; i < vcDevData.size(); i++) {
				byte[] eachBinData = (byte[]) vcDevData.elementAt(i);
				DeviceData.Builder builderDevData = DeviceData.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolDevData = true;
				int nestedFieldDevData = -1;
				while (boolDevData) {
					nestedFieldDevData = getNextFieldNumber(innerInputReader);
					boolDevData = DeviceData.populateBuilderWithField(innerInputReader, builderDevData, nestedFieldDevData);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setDevData(builderDevData.build());
			}

		} else if (fieldNumber == fieldNumberErrCode) {
			builder.setErrCode(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberSttCode) {
			builder.setSttCode(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberTestResponse) {
			java.util.Vector vcTestResponse = reader.readMessages(fieldNumberTestResponse);
			for (int i = 0; i < vcTestResponse.size(); i++) {
				byte[] eachBinData = (byte[]) vcTestResponse.elementAt(i);
				TestResponse.Builder builderTestResponse = TestResponse.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolTestResponse = true;
				int nestedFieldTestResponse = -1;
				while (boolTestResponse) {
					nestedFieldTestResponse = getNextFieldNumber(innerInputReader);
					boolTestResponse = TestResponse.populateBuilderWithField(innerInputReader, builderTestResponse, nestedFieldTestResponse);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setTestResponse(builderTestResponse.build());
			}

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		Response.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return Response
	 * @throws IOException Signals that an I/O exception has occurred.
	 */


	// Abhishek- It will get all the response from bluetooth
	public static Response parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**j
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return Response
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static Response parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return Response
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static Response parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}