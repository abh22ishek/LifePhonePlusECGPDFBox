/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Wed Dec 05 15:08:22 IST 2012.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class BgData.
 */
public final class BgData extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The bg reading type. */
	private final int bgReadingType;

	/** The Constant fieldNumberBgReadingType. */
	private static final int fieldNumberBgReadingType = 1;

	/** The bg reading. */
	private final double bgReading;

	/** The Constant fieldNumberBgReading. */
	private static final int fieldNumberBgReading = 2;

	/** The bg symptoms. */
	private final java.util.Vector bgSymptoms;

	/** The Constant fieldNumberBgSymptoms. */
	private static final int fieldNumberBgSymptoms = 3;

	/** The annotation txt. */
	private final String annotationTxt;

	/** The Constant fieldNumberAnnotationTxt. */
	private static final int fieldNumberAnnotationTxt = 4;

	/** The has annotation txt. */
	private final boolean hasAnnotationTxt;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for BgData.
	 * @param builder Builder
	 */
	private BgData(final Builder builder) {
		if (builder.hasBgReadingType && builder.hasBgReading ) {
			this.bgReadingType = builder.bgReadingType;
			this.bgReading = builder.bgReading;
			this.bgSymptoms = builder.bgSymptoms;
			this.annotationTxt = builder.annotationTxt;
			this.hasAnnotationTxt = builder.hasAnnotationTxt;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" bgReadingType:" + builder.hasBgReadingType + " bgReading:" + builder.hasBgReading + "");
		}
	}

	/**
	 * The Class BgSymptoms.
	 */
	public static class BgSymptoms {

		/** The Constant ExcessiveHunger. */
		public static final int ExcessiveHunger = 1;

		/** The Constant ProfuseSweating. */
		public static final int ProfuseSweating = 2;

		/** The Constant Dizziness. */
		public static final int Dizziness = 3;

		/** The Constant Fatigue. */
		public static final int Fatigue = 4;

		/** The Constant Tremors. */
		public static final int Tremors = 5;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 1) {
				retValue = "ExcessiveHunger";

			} else if (value == 2) {
				retValue = "ProfuseSweating";

			} else if (value == 3) {
				retValue = "Dizziness";

			} else if (value == 4) {
				retValue = "Fatigue";

			} else if (value == 5) {
				retValue = "Tremors";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The bg reading type. */
		private int bgReadingType;

		/** The has bg reading type. */
		private boolean hasBgReadingType = false;

		/** The bg reading. */
		private double bgReading;

		/** The has bg reading. */
		private boolean hasBgReading = false;

		/** The bg symptoms. */
		private java.util.Vector bgSymptoms = new java.util.Vector();

		/** The has bg symptoms. */
		private boolean hasBgSymptoms = false;

		/** The annotation txt. */
		private String annotationTxt;

		/** The has annotation txt. */
		private boolean hasAnnotationTxt = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setBgReadingType.
		 * @param bgReadingType int
		 * @return Builder
		 */
		public Builder setBgReadingType(final int bgReadingType) {
			this.bgReadingType = bgReadingType;
			this.hasBgReadingType = true;
			return this;
		}

		/**
		 * Method setBgReading.
		 * @param bgReading double
		 * @return Builder
		 */
		public Builder setBgReading(final double bgReading) {
			this.bgReading = bgReading;
			this.hasBgReading = true;
			return this;
		}

		/**
		 * Method setBgSymptoms.
		 * @param bgSymptoms java.util.Vector
		 * @return Builder
		 */
		public Builder setBgSymptoms(final java.util.Vector bgSymptoms) {
			if(!hasBgSymptoms) {
				hasBgSymptoms = true;
			}
			this.bgSymptoms = bgSymptoms;
			return this;
		}


		/**
		 * Method addElementBgSymptoms.
		 * @param element int
		 * @return Builder
		 */
		public Builder addElementBgSymptoms(final int element) {
			if(!hasBgSymptoms) {
				hasBgSymptoms = true;
			}
			bgSymptoms.addElement(new Integer(element));
			return this;
		}

		/**
		 * Method setAnnotationTxt.
		 * @param annotationTxt String
		 * @return Builder
		 */
		public Builder setAnnotationTxt(final String annotationTxt) {
			this.annotationTxt = annotationTxt;
			this.hasAnnotationTxt = true;
			return this;
		}

		/**
		 * Method build.
		 * @return BgData
		 */
		public BgData build() {
			return new BgData(this);
		}
	}

	/**
	 * Method getBgReadingType.
	 * @return int
	 */
	public int getBgReadingType() {
		return bgReadingType;
	}

	/**
	 * Method getBgReading.
	 * @return double
	 */
	public double getBgReading() {
		return bgReading;
	}

	/**
	 * Method getBgSymptoms.
	 * @return java.util.Vector
	 */
	public java.util.Vector getBgSymptoms() {
		return bgSymptoms;
	}

	/**
	 * Method getAnnotationTxt.
	 * @return String
	 */
	public String getAnnotationTxt() {
		return annotationTxt;
	}

	/**
	 * Method hasAnnotationTxt.
	 * @return boolean
	 */
	public boolean hasAnnotationTxt() {
		return hasAnnotationTxt;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "bgReadingType = " + this.bgReadingType + TAB;
		retValue += "bgReading = " + this.bgReading + TAB;
		retValue += "bgSymptoms = " + this.bgSymptoms + TAB;
		if(hasAnnotationTxt) retValue += "annotationTxt = " + this.annotationTxt + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberBgReadingType, bgReadingType);
		totalSize += ComputeSizeUtil.computeDoubleSize(fieldNumberBgReading, bgReading);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberBgSymptoms, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, bgSymptoms);
		if(hasAnnotationTxt) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberAnnotationTxt, annotationTxt);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeInt(fieldNumberBgReadingType, bgReadingType);
		writer.writeDouble(fieldNumberBgReading, bgReading);
		writer.writeList(fieldNumberBgSymptoms, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, bgSymptoms);
		if(hasAnnotationTxt) writer.writeString(fieldNumberAnnotationTxt, annotationTxt);
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return BgData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static BgData parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = BgData.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberBgReadingType:
				builder.setBgReadingType(reader.readInt(fieldNumber));
				break;
			case fieldNumberBgReading:
				builder.setBgReading(reader.readDouble(fieldNumber));
				break;
			case fieldNumberBgSymptoms:
				builder.addElementBgSymptoms(reader.readInt(fieldNumber));
				break;
			case fieldNumberAnnotationTxt:
				builder.setAnnotationTxt(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		BgData.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return BgData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static BgData parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return BgData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static BgData parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return BgData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static BgData parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}