/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Thu Jan 17 09:36:51 IST 2013.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class Measure.
 */
public final class Measure extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The measurement type. */
	private final int measurementType;

	/** The Constant fieldNumberMeasurementType. */
	private static final int fieldNumberMeasurementType = 1;

	/** The type. */
	private final int type;

	/** The Constant fieldNumberType. */
	private static final int fieldNumberType = 2;

	/** The has type. */
	private final boolean hasType;

	/** The duration. */
	private final int duration;

	/** The Constant fieldNumberDuration. */
	private static final int fieldNumberDuration = 3;

	/** The has duration. */
	private final boolean hasDuration;

	/** The measurement action. */
	private final int measurementAction;

	/** The Constant fieldNumberMeasurementAction. */
	private static final int fieldNumberMeasurementAction = 4;

	/** The has measurement action. */
	private final boolean hasMeasurementAction;

	/** The lead. */
	private final int lead;

	/** The Constant fieldNumberLead. */
	private static final int fieldNumberLead = 20;

	/** The has lead. */
	private final boolean hasLead;

	/** The bg reading type. */
	private final int bgReadingType;

	/** The Constant fieldNumberBgReadingType. */
	private static final int fieldNumberBgReadingType = 21;

	/** The has bg reading type. */
	private final boolean hasBgReadingType;

	/** The act params. */
	private final ActivityParams actParams;

	/** The Constant fieldNumberActParams. */
	private static final int fieldNumberActParams = 30;

	/** The has act params. */
	private final boolean hasActParams;

	/** The bg params. */
	private final BloodGlucoseParams bgParams;

	/** The Constant fieldNumberBgParams. */
	private static final int fieldNumberBgParams = 40;

	/** The has bg params. */
	private final boolean hasBgParams;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for Measure.
	 * @param builder Builder
	 */
	private Measure(final Builder builder) {
		if (builder.hasMeasurementType ) {
			this.measurementType = builder.measurementType;
			this.type = builder.type;
			this.hasType = builder.hasType;
			this.duration = builder.duration;
			this.hasDuration = builder.hasDuration;
			this.measurementAction = builder.measurementAction;
			this.hasMeasurementAction = builder.hasMeasurementAction;
			this.lead = builder.lead;
			this.hasLead = builder.hasLead;
			this.bgReadingType = builder.bgReadingType;
			this.hasBgReadingType = builder.hasBgReadingType;
			this.actParams = builder.actParams;
			this.hasActParams = builder.hasActParams;
			this.bgParams = builder.bgParams;
			this.hasBgParams = builder.hasBgParams;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" measurementType:" + builder.hasMeasurementType + "");
		}
	}

	/**
	 * The Class SensingType.
	 */
	public static class SensingType {

		/** The Constant OneTime. */
		public static final int OneTime = 1;

		/** The Constant Continuous. */
		public static final int Continuous = 2;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 1) {
				retValue = "OneTime";

			} else if (value == 2) {
				retValue = "Continuous";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class MeasurementAction.
	 */
	public static class MeasurementAction {

		/** The Constant START. */
		public static final int START = 1;

		/** The Constant STOP. */
		public static final int STOP = 2;

		/** The Constant PAUSE. */
		public static final int PAUSE = 3;

		/** The Constant CANCEL. */
		public static final int CANCEL = 4;

		/** The Constant STATUS. */
		public static final int STATUS = 5;

		/** The Constant RESUME. */
		public static final int RESUME = 6;

		/** The Constant REMEASURE. */
		public static final int REMEASURE = 7;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 1) {
				retValue = "START";

			} else if (value == 2) {
				retValue = "STOP";

			} else if (value == 3) {
				retValue = "PAUSE";

			} else if (value == 4) {
				retValue = "CANCEL";

			} else if (value == 5) {
				retValue = "STATUS";

			} else if (value == 6) {
				retValue = "RESUME";

			} else if (value == 7) {
				retValue = "REMEASURE";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The measurement type. */
		private int measurementType;

		/** The has measurement type. */
		private boolean hasMeasurementType = false;

		/** The type. */
		private int type;

		/** The has type. */
		private boolean hasType = false;

		/** The duration. */
		private int duration;

		/** The has duration. */
		private boolean hasDuration = false;

		/** The measurement action. */
		private int measurementAction;

		/** The has measurement action. */
		private boolean hasMeasurementAction = false;

		/** The lead. */
		private int lead;

		/** The has lead. */
		private boolean hasLead = false;

		/** The bg reading type. */
		private int bgReadingType;

		/** The has bg reading type. */
		private boolean hasBgReadingType = false;

		/** The act params. */
		private ActivityParams actParams;

		/** The has act params. */
		private boolean hasActParams = false;

		/** The bg params. */
		private BloodGlucoseParams bgParams;

		/** The has bg params. */
		private boolean hasBgParams = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setMeasurementType.
		 * @param measurementType int
		 * @return Builder
		 */
		public Builder setMeasurementType(final int measurementType) {
			this.measurementType = measurementType;
			this.hasMeasurementType = true;
			return this;
		}

		/**
		 * Method setType.
		 * @param type int
		 * @return Builder
		 */
		public Builder setType(final int type) {
			this.type = type;
			this.hasType = true;
			return this;
		}

		/**
		 * Method setDuration.
		 * @param duration int
		 * @return Builder
		 */
		public Builder setDuration(final int duration) {
			this.duration = duration;
			this.hasDuration = true;
			return this;
		}

		/**
		 * Method setMeasurementAction.
		 * @param measurementAction int
		 * @return Builder
		 */
		public Builder setMeasurementAction(final int measurementAction) {
			this.measurementAction = measurementAction;
			this.hasMeasurementAction = true;
			return this;
		}

		/**
		 * Method setLead.
		 * @param lead int
		 * @return Builder
		 */
		public Builder setLead(final int lead) {
			this.lead = lead;
			this.hasLead = true;
			return this;
		}

		/**
		 * Method setBgReadingType.
		 * @param bgReadingType int
		 * @return Builder
		 */
		public Builder setBgReadingType(final int bgReadingType) {
			this.bgReadingType = bgReadingType;
			this.hasBgReadingType = true;
			return this;
		}

		/**
		 * Method setActParams.
		 * @param actParams ActivityParams
		 * @return Builder
		 */
		public Builder setActParams(final ActivityParams actParams) {
			this.actParams = actParams;
			this.hasActParams = true;
			return this;
		}

		/**
		 * Method setBgParams.
		 * @param bgParams BloodGlucoseParams
		 * @return Builder
		 */
		public Builder setBgParams(final BloodGlucoseParams bgParams) {
			this.bgParams = bgParams;
			this.hasBgParams = true;
			return this;
		}

		/**
		 * Method build.
		 * @return Measure
		 */
		public Measure build() {
			return new Measure(this);
		}
	}

	/**
	 * Method getMeasurementType.
	 * @return int
	 */
	public int getMeasurementType() {
		return measurementType;
	}

	/**
	 * Method getType.
	 * @return int
	 */
	public int getType() {
		return type;
	}

	/**
	 * Method hasType.
	 * @return boolean
	 */
	public boolean hasType() {
		return hasType;
	}

	/**
	 * Method getDuration.
	 * @return int
	 */
	public int getDuration() {
		return duration;
	}

	/**
	 * Method hasDuration.
	 * @return boolean
	 */
	public boolean hasDuration() {
		return hasDuration;
	}

	/**
	 * Method getMeasurementAction.
	 * @return int
	 */
	public int getMeasurementAction() {
		return measurementAction;
	}

	/**
	 * Method hasMeasurementAction.
	 * @return boolean
	 */
	public boolean hasMeasurementAction() {
		return hasMeasurementAction;
	}

	/**
	 * Method getLead.
	 * @return int
	 */
	public int getLead() {
		return lead;
	}

	/**
	 * Method hasLead.
	 * @return boolean
	 */
	public boolean hasLead() {
		return hasLead;
	}

	/**
	 * Method getBgReadingType.
	 * @return int
	 */
	public int getBgReadingType() {
		return bgReadingType;
	}

	/**
	 * Method hasBgReadingType.
	 * @return boolean
	 */
	public boolean hasBgReadingType() {
		return hasBgReadingType;
	}

	/**
	 * Method getActParams.
	 * @return ActivityParams
	 */
	public ActivityParams getActParams() {
		return actParams;
	}

	/**
	 * Method hasActParams.
	 * @return boolean
	 */
	public boolean hasActParams() {
		return hasActParams;
	}

	/**
	 * Method getBgParams.
	 * @return BloodGlucoseParams
	 */
	public BloodGlucoseParams getBgParams() {
		return bgParams;
	}

	/**
	 * Method hasBgParams.
	 * @return boolean
	 */
	public boolean hasBgParams() {
		return hasBgParams;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "measurementType = " + this.measurementType + TAB;
		if(hasType) retValue += "type = " + this.type + TAB;
		if(hasDuration) retValue += "duration = " + this.duration + TAB;
		if(hasMeasurementAction) retValue += "measurementAction = " + this.measurementAction + TAB;
		if(hasLead) retValue += "lead = " + this.lead + TAB;
		if(hasBgReadingType) retValue += "bgReadingType = " + this.bgReadingType + TAB;
		if(hasActParams) retValue += "actParams = " + this.actParams + TAB;
		if(hasBgParams) retValue += "bgParams = " + this.bgParams + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberMeasurementType, measurementType);
		if(hasType) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberType, type);
		if(hasDuration) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberDuration, duration);
		if(hasMeasurementAction) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberMeasurementAction, measurementAction);
		if(hasLead) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberLead, lead);
		if(hasBgReadingType) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberBgReadingType, bgReadingType);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasActParams) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberActParams, actParams.computeSize());
		if(hasBgParams) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberBgParams, bgParams.computeSize());

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeInt(fieldNumberMeasurementType, measurementType);
		if(hasType) writer.writeInt(fieldNumberType, type);
		if(hasDuration) writer.writeInt(fieldNumberDuration, duration);
		if(hasMeasurementAction) writer.writeInt(fieldNumberMeasurementAction, measurementAction);
		if(hasLead) writer.writeInt(fieldNumberLead, lead);
		if(hasBgReadingType) writer.writeInt(fieldNumberBgReadingType, bgReadingType);
		if(hasActParams) { writer.writeMessage(fieldNumberActParams, actParams.computeSize()); actParams.writeFields(writer); }
		if(hasBgParams) { writer.writeMessage(fieldNumberBgParams, bgParams.computeSize()); bgParams.writeFields(writer); }
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return Measure
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static Measure parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = Measure.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberMeasurementType) {
			builder.setMeasurementType(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberType) {
			builder.setType(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberDuration) {
			builder.setDuration(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberMeasurementAction) {
			builder.setMeasurementAction(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberLead) {
			builder.setLead(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberBgReadingType) {
			builder.setBgReadingType(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberActParams) {
			java.util.Vector vcActParams = reader.readMessages(fieldNumberActParams);
			for (int i = 0; i < vcActParams.size(); i++) {
				byte[] eachBinData = (byte[]) vcActParams.elementAt(i);
				ActivityParams.Builder builderActParams = ActivityParams.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolActParams = true;
				int nestedFieldActParams = -1;
				while (boolActParams) {
					nestedFieldActParams = getNextFieldNumber(innerInputReader);
					boolActParams = ActivityParams.populateBuilderWithField(innerInputReader, builderActParams, nestedFieldActParams);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setActParams(builderActParams.build());
			}

		} else if (fieldNumber == fieldNumberBgParams) {
			java.util.Vector vcBgParams = reader.readMessages(fieldNumberBgParams);
			for (int i = 0; i < vcBgParams.size(); i++) {
				byte[] eachBinData = (byte[]) vcBgParams.elementAt(i);
				BloodGlucoseParams.Builder builderBgParams = BloodGlucoseParams.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolBgParams = true;
				int nestedFieldBgParams = -1;
				while (boolBgParams) {
					nestedFieldBgParams = getNextFieldNumber(innerInputReader);
					boolBgParams = BloodGlucoseParams.populateBuilderWithField(innerInputReader, builderBgParams, nestedFieldBgParams);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setBgParams(builderBgParams.build());
			}

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		Measure.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return Measure
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static Measure parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return Measure
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static Measure parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return Measure
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static Measure parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}