/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Tue May 22 15:05:13 IST 2012.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class UserMessage.
 */
public final class UserMessage extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The phone number. */
	private final String phoneNumber;

	/** The Constant fieldNumberPhoneNumber. */
	private static final int fieldNumberPhoneNumber = 1;

	/** The has phone number. */
	private final boolean hasPhoneNumber;

	/** The user pin. */
	private final int userPin;

	/** The Constant fieldNumberUserPin. */
	private static final int fieldNumberUserPin = 2;

	/** The usr msg action. */
	private final int usrMsgAction;

	/** The Constant fieldNumberUsrMsgAction. */
	private static final int fieldNumberUsrMsgAction = 10;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for UserMessage.
	 * @param builder Builder
	 */
	private UserMessage(final Builder builder) {
		if (builder.hasUserPin && builder.hasUsrMsgAction ) {
			this.phoneNumber = builder.phoneNumber;
			this.hasPhoneNumber = builder.hasPhoneNumber;
			this.userPin = builder.userPin;
			this.usrMsgAction = builder.usrMsgAction;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" userPin:" + builder.hasUserPin + " usrMsgAction:" + builder.hasUsrMsgAction + "");
		}
	}

	/**
	 * The Class UserMsgAction.
	 */
	public static class UserMsgAction {

		/** The Constant UserProv. */
		public static final int UserProv = 1;

		/** The Constant UserAuth. */
		public static final int UserAuth = 2;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 1) {
				retValue = "UserProv";

			} else if (value == 2) {
				retValue = "UserAuth";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The phone number. */
		private String phoneNumber;

		/** The has phone number. */
		private boolean hasPhoneNumber = false;

		/** The user pin. */
		private int userPin;

		/** The has user pin. */
		private boolean hasUserPin = false;

		/** The usr msg action. */
		private int usrMsgAction;

		/** The has usr msg action. */
		private boolean hasUsrMsgAction = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setPhoneNumber.
		 * @param phoneNumber String
		 * @return Builder
		 */
		public Builder setPhoneNumber(final String phoneNumber) {
			this.phoneNumber = phoneNumber;
			this.hasPhoneNumber = true;
			return this;
		}

		/**
		 * Method setUserPin.
		 * @param userPin int
		 * @return Builder
		 */
		public Builder setUserPin(final int userPin) {
			this.userPin = userPin;
			this.hasUserPin = true;
			return this;
		}

		/**
		 * Method setUsrMsgAction.
		 * @param usrMsgAction int
		 * @return Builder
		 */
		public Builder setUsrMsgAction(final int usrMsgAction) {
			this.usrMsgAction = usrMsgAction;
			this.hasUsrMsgAction = true;
			return this;
		}

		/**
		 * Method build.
		 * @return UserMessage
		 */
		public UserMessage build() {
			return new UserMessage(this);
		}
	}

	/**
	 * Method getPhoneNumber.
	 * @return String
	 */
	public String getPhoneNumber() {
		return phoneNumber;
	}

	/**
	 * Method hasPhoneNumber.
	 * @return boolean
	 */
	public boolean hasPhoneNumber() {
		return hasPhoneNumber;
	}

	/**
	 * Method getUserPin.
	 * @return int
	 */
	public int getUserPin() {
		return userPin;
	}

	/**
	 * Method getUsrMsgAction.
	 * @return int
	 */
	public int getUsrMsgAction() {
		return usrMsgAction;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasPhoneNumber) retValue += "phoneNumber = " + this.phoneNumber + TAB;
		retValue += "userPin = " + this.userPin + TAB;
		retValue += "usrMsgAction = " + this.usrMsgAction + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		if(hasPhoneNumber) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberPhoneNumber, phoneNumber);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberUserPin, userPin);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberUsrMsgAction, usrMsgAction);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasPhoneNumber) writer.writeString(fieldNumberPhoneNumber, phoneNumber);
		writer.writeInt(fieldNumberUserPin, userPin);
		writer.writeInt(fieldNumberUsrMsgAction, usrMsgAction);
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return UserMessage
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static UserMessage parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = UserMessage.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberPhoneNumber) {
			builder.setPhoneNumber(reader.readString(fieldNumber));

		} else if (fieldNumber == fieldNumberUserPin) {
			builder.setUserPin(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberUsrMsgAction) {
			builder.setUsrMsgAction(reader.readInt(fieldNumber));

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		UserMessage.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return UserMessage
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static UserMessage parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return UserMessage
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static UserMessage parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return UserMessage
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static UserMessage parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}