/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Tue May 22 15:05:13 IST 2012.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class PaginationData.
 */
public final class PaginationData extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The page size. */
	private final int pageSize;

	/** The Constant fieldNumberPageSize. */
	private static final int fieldNumberPageSize = 1;

	/** The has page size. */
	private final boolean hasPageSize;

	/** The page number. */
	private final int pageNumber;

	/** The Constant fieldNumberPageNumber. */
	private static final int fieldNumberPageNumber = 2;

	/** The has page number. */
	private final boolean hasPageNumber;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for PaginationData.
	 * @param builder Builder
	 */
	private PaginationData(final Builder builder) {
		if (true) {
			this.pageSize = builder.pageSize;
			this.hasPageSize = builder.hasPageSize;
			this.pageNumber = builder.pageNumber;
			this.hasPageNumber = builder.hasPageNumber;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				"");
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The page size. */
		private int pageSize;

		/** The has page size. */
		private boolean hasPageSize = false;

		/** The page number. */
		private int pageNumber;

		/** The has page number. */
		private boolean hasPageNumber = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setPageSize.
		 * @param pageSize int
		 * @return Builder
		 */
		public Builder setPageSize(final int pageSize) {
			this.pageSize = pageSize;
			this.hasPageSize = true;
			return this;
		}

		/**
		 * Method setPageNumber.
		 * @param pageNumber int
		 * @return Builder
		 */
		public Builder setPageNumber(final int pageNumber) {
			this.pageNumber = pageNumber;
			this.hasPageNumber = true;
			return this;
		}

		/**
		 * Method build.
		 * @return PaginationData
		 */
		public PaginationData build() {
			return new PaginationData(this);
		}
	}

	/**
	 * Method getPageSize.
	 * @return int
	 */
	public int getPageSize() {
		return pageSize;
	}

	/**
	 * Method hasPageSize.
	 * @return boolean
	 */
	public boolean hasPageSize() {
		return hasPageSize;
	}

	/**
	 * Method getPageNumber.
	 * @return int
	 */
	public int getPageNumber() {
		return pageNumber;
	}

	/**
	 * Method hasPageNumber.
	 * @return boolean
	 */
	public boolean hasPageNumber() {
		return hasPageNumber;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasPageSize) retValue += "pageSize = " + this.pageSize + TAB;
		if(hasPageNumber) retValue += "pageNumber = " + this.pageNumber + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		if(hasPageSize) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberPageSize, pageSize);
		if(hasPageNumber) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberPageNumber, pageNumber);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasPageSize) writer.writeInt(fieldNumberPageSize, pageSize);
		if(hasPageNumber) writer.writeInt(fieldNumberPageNumber, pageNumber);
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return PaginationData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static PaginationData parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = PaginationData.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberPageSize) {
			builder.setPageSize(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberPageNumber) {
			builder.setPageNumber(reader.readInt(fieldNumber));

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		PaginationData.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return PaginationData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static PaginationData parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return PaginationData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static PaginationData parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return PaginationData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static PaginationData parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}