/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Thu Jan 17 09:36:51 IST 2013.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class BloodGlucoseParams.
 */
public final class BloodGlucoseParams extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The bg control solution. */
	private final int bgControlSolution;

	/** The Constant fieldNumberBgControlSolution. */
	private static final int fieldNumberBgControlSolution = 1;

	/** The has bg control solution. */
	private final boolean hasBgControlSolution;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for BloodGlucoseParams.
	 * @param builder Builder
	 */
	private BloodGlucoseParams(final Builder builder) {
		if (true) {
			this.bgControlSolution = builder.bgControlSolution;
			this.hasBgControlSolution = builder.hasBgControlSolution;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				"");
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The bg control solution. */
		private int bgControlSolution;

		/** The has bg control solution. */
		private boolean hasBgControlSolution = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setBgControlSolution.
		 * @param bgControlSolution int
		 * @return Builder
		 */
		public Builder setBgControlSolution(final int bgControlSolution) {
			this.bgControlSolution = bgControlSolution;
			this.hasBgControlSolution = true;
			return this;
		}

		/**
		 * Method build.
		 * @return BloodGlucoseParams
		 */
		public BloodGlucoseParams build() {
			return new BloodGlucoseParams(this);
		}
	}

	/**
	 * Method getBgControlSolution.
	 * @return int
	 */
	public int getBgControlSolution() {
		return bgControlSolution;
	}

	/**
	 * Method hasBgControlSolution.
	 * @return boolean
	 */
	public boolean hasBgControlSolution() {
		return hasBgControlSolution;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasBgControlSolution) retValue += "bgControlSolution = " + this.bgControlSolution + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		if(hasBgControlSolution) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberBgControlSolution, bgControlSolution);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasBgControlSolution) writer.writeInt(fieldNumberBgControlSolution, bgControlSolution);
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return BloodGlucoseParams
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static BloodGlucoseParams parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = BloodGlucoseParams.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberBgControlSolution) {
			builder.setBgControlSolution(reader.readInt(fieldNumber));

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		BloodGlucoseParams.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return BloodGlucoseParams
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static BloodGlucoseParams parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return BloodGlucoseParams
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static BloodGlucoseParams parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return BloodGlucoseParams
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static BloodGlucoseParams parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}