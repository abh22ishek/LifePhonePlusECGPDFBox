/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Thu May 02 15:16:35 IST 2013.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class DataLoggingResponse.
 */
public final class DataLoggingResponse extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The case id. */
	private final int caseId;

	/** The Constant fieldNumberCaseId. */
	private static final int fieldNumberCaseId = 1;

	/** The has case id. */
	private final boolean hasCaseId;

	/** The measurement id. */
	private final int measurementId;

	/** The Constant fieldNumberMeasurementId. */
	private static final int fieldNumberMeasurementId = 2;

	/** The rule action. */
	private final int ruleAction;

	/** The Constant fieldNumberRuleAction. */
	private static final int fieldNumberRuleAction = 10;

	/** The rule message. */
	private final String ruleMessage;

	/** The Constant fieldNumberRuleMessage. */
	private static final int fieldNumberRuleMessage = 20;

	/** The has rule message. */
	private final boolean hasRuleMessage;

	/** The status. */
	private final String status;

	/** The Constant fieldNumberStatus. */
	private static final int fieldNumberStatus = 30;

	/** The tat categories. */
	private final TATCategoryList tatCategories;

	/** The Constant fieldNumberTatCategories. */
	private static final int fieldNumberTatCategories = 40;

	/** The has tat categories. */
	private final boolean hasTatCategories;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for DataLoggingResponse.
	 * @param builder Builder
	 */
	private DataLoggingResponse(final Builder builder) {
		if (builder.hasMeasurementId && builder.hasRuleAction && builder.hasStatus ) {
			this.caseId = builder.caseId;
			this.hasCaseId = builder.hasCaseId;
			this.measurementId = builder.measurementId;
			this.ruleAction = builder.ruleAction;
			this.ruleMessage = builder.ruleMessage;
			this.hasRuleMessage = builder.hasRuleMessage;
			this.status = builder.status;
			this.tatCategories = builder.tatCategories;
			this.hasTatCategories = builder.hasTatCategories;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" measurementId:" + builder.hasMeasurementId + " ruleAction:" + builder.hasRuleAction + " status:" + builder.hasStatus + "");
		}
	}

	/**
	 * The Class RuleAction.
	 */
	public static class RuleAction {

		/** The Constant Inform. */
		public static final int Inform = 1;

		/** The Constant Prompt. */
		public static final int Prompt = 2;

		/** The Constant Noop. */
		public static final int Noop = 3;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 1) {
				retValue = "Inform";

			} else if (value == 2) {
				retValue = "Prompt";

			} else if (value == 3) {
				retValue = "Noop";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The case id. */
		private int caseId;

		/** The has case id. */
		private boolean hasCaseId = false;

		/** The measurement id. */
		private int measurementId;

		/** The has measurement id. */
		private boolean hasMeasurementId = false;

		/** The rule action. */
		private int ruleAction;

		/** The has rule action. */
		private boolean hasRuleAction = false;

		/** The rule message. */
		private String ruleMessage;

		/** The has rule message. */
		private boolean hasRuleMessage = false;

		/** The status. */
		private String status;

		/** The has status. */
		private boolean hasStatus = false;

		/** The tat categories. */
		private TATCategoryList tatCategories;

		/** The has tat categories. */
		private boolean hasTatCategories = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setCaseId.
		 * @param caseId int
		 * @return Builder
		 */
		public Builder setCaseId(final int caseId) {
			this.caseId = caseId;
			this.hasCaseId = true;
			return this;
		}

		/**
		 * Method setMeasurementId.
		 * @param measurementId int
		 * @return Builder
		 */
		public Builder setMeasurementId(final int measurementId) {
			this.measurementId = measurementId;
			this.hasMeasurementId = true;
			return this;
		}

		/**
		 * Method setRuleAction.
		 * @param ruleAction int
		 * @return Builder
		 */
		public Builder setRuleAction(final int ruleAction) {
			this.ruleAction = ruleAction;
			this.hasRuleAction = true;
			return this;
		}

		/**
		 * Method setRuleMessage.
		 * @param ruleMessage String
		 * @return Builder
		 */
		public Builder setRuleMessage(final String ruleMessage) {
			this.ruleMessage = ruleMessage;
			this.hasRuleMessage = true;
			return this;
		}

		/**
		 * Method setStatus.
		 * @param status String
		 * @return Builder
		 */
		public Builder setStatus(final String status) {
			this.status = status;
			this.hasStatus = true;
			return this;
		}

		/**
		 * Method setTatCategories.
		 * @param tatCategories TATCategoryList
		 * @return Builder
		 */
		public Builder setTatCategories(final TATCategoryList tatCategories) {
			this.tatCategories = tatCategories;
			this.hasTatCategories = true;
			return this;
		}

		/**
		 * Method build.
		 * @return DataLoggingResponse
		 */
		public DataLoggingResponse build() {
			return new DataLoggingResponse(this);
		}
	}

	/**
	 * Method getCaseId.
	 * @return int
	 */
	public int getCaseId() {
		return caseId;
	}

	/**
	 * Method hasCaseId.
	 * @return boolean
	 */
	public boolean hasCaseId() {
		return hasCaseId;
	}

	/**
	 * Method getMeasurementId.
	 * @return int
	 */
	public int getMeasurementId() {
		return measurementId;
	}

	/**
	 * Method getRuleAction.
	 * @return int
	 */
	public int getRuleAction() {
		return ruleAction;
	}

	/**
	 * Method getRuleMessage.
	 * @return String
	 */
	public String getRuleMessage() {
		return ruleMessage;
	}

	/**
	 * Method hasRuleMessage.
	 * @return boolean
	 */
	public boolean hasRuleMessage() {
		return hasRuleMessage;
	}

	/**
	 * Method getStatus.
	 * @return String
	 */
	public String getStatus() {
		return status;
	}

	/**
	 * Method getTatCategories.
	 * @return TATCategoryList
	 */
	public TATCategoryList getTatCategories() {
		return tatCategories;
	}

	/**
	 * Method hasTatCategories.
	 * @return boolean
	 */
	public boolean hasTatCategories() {
		return hasTatCategories;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasCaseId) retValue += "caseId = " + this.caseId + TAB;
		retValue += "measurementId = " + this.measurementId + TAB;
		retValue += "ruleAction = " + this.ruleAction + TAB;
		if(hasRuleMessage) retValue += "ruleMessage = " + this.ruleMessage + TAB;
		retValue += "status = " + this.status + TAB;
		if(hasTatCategories) retValue += "tatCategories = " + this.tatCategories + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		if(hasCaseId) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberCaseId, caseId);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberMeasurementId, measurementId);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberRuleAction, ruleAction);
		if(hasRuleMessage) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberRuleMessage, ruleMessage);
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberStatus, status);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasTatCategories) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberTatCategories, tatCategories.computeSize());

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasCaseId) writer.writeInt(fieldNumberCaseId, caseId);
		writer.writeInt(fieldNumberMeasurementId, measurementId);
		writer.writeInt(fieldNumberRuleAction, ruleAction);
		if(hasRuleMessage) writer.writeString(fieldNumberRuleMessage, ruleMessage);
		writer.writeString(fieldNumberStatus, status);
		if(hasTatCategories) { writer.writeMessage(fieldNumberTatCategories, tatCategories.computeSize()); tatCategories.writeFields(writer); }
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return DataLoggingResponse
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static DataLoggingResponse parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = DataLoggingResponse.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberCaseId) {
			builder.setCaseId(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberMeasurementId) {
			builder.setMeasurementId(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberRuleAction) {
			builder.setRuleAction(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberRuleMessage) {
			builder.setRuleMessage(reader.readString(fieldNumber));

		} else if (fieldNumber == fieldNumberStatus) {
			builder.setStatus(reader.readString(fieldNumber));

		} else if (fieldNumber == fieldNumberTatCategories) {
			java.util.Vector vcTatCategories = reader.readMessages(fieldNumberTatCategories);
			for (int i = 0; i < vcTatCategories.size(); i++) {
				byte[] eachBinData = (byte[]) vcTatCategories.elementAt(i);
				TATCategoryList.Builder builderTatCategories = TATCategoryList.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolTatCategories = true;
				int nestedFieldTatCategories = -1;
				while (boolTatCategories) {
					nestedFieldTatCategories = getNextFieldNumber(innerInputReader);
					boolTatCategories = TATCategoryList.populateBuilderWithField(innerInputReader, builderTatCategories, nestedFieldTatCategories);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setTatCategories(builderTatCategories.build());
			}

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		DataLoggingResponse.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return DataLoggingResponse
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static DataLoggingResponse parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return DataLoggingResponse
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static DataLoggingResponse parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return DataLoggingResponse
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static DataLoggingResponse parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}