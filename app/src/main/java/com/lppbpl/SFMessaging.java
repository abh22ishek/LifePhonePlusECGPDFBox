/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Thu Jan 17 09:36:51 IST 2013.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;

// TODO: Auto-generated Javadoc
/**
 * The Class SFMessaging.
 */


// this class is used as input parameter to send commmand to BT device
public final class SFMessaging extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The sf msg type. */
	private final int sfMsgType;

	/** The Constant fieldNumberSfMsgType. */
	private static final int fieldNumberSfMsgType = 1;

	/** The sf measure msg. */
	private final Measure sfMeasureMsg;

	/** The Constant fieldNumberSfMeasureMsg. */
	private static final int fieldNumberSfMeasureMsg = 2;

	/** The has sf measure msg. */
	private final boolean hasSfMeasureMsg;

	/** The sf getdata msg. */
	private final GetData sfGetdataMsg;

	/** The Constant fieldNumberSfGetdataMsg. */
	private static final int fieldNumberSfGetdataMsg = 3;

	/** The has sf getdata msg. */
	private final boolean hasSfGetdataMsg;

	/** The sf config msg. */
	private final ConfigMessage sfConfigMsg;

	/** The Constant fieldNumberSfConfigMsg. */
	private static final int fieldNumberSfConfigMsg = 4;

	/** The has sf config msg. */
	private final boolean hasSfConfigMsg;

	/** The sf user msg. */
	private final UserMessage sfUserMsg;

	/** The Constant fieldNumberSfUserMsg. */
	private static final int fieldNumberSfUserMsg = 5;

	/** The has sf user msg. */
	private final boolean hasSfUserMsg;

	/** The sf response msg. */
	private final Response sfResponseMsg;

	/** The Constant fieldNumberSfResponseMsg. */
	private static final int fieldNumberSfResponseMsg = 6;

	/** The has sf response msg. */
	private final boolean hasSfResponseMsg;

	/** The sf test msg. */
	private final Test sfTestMsg;

	/** The Constant fieldNumberSfTestMsg. */
	private static final int fieldNumberSfTestMsg = 7;

	/** The has sf test msg. */
	private final boolean hasSfTestMsg;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for SFMessaging.
	 * @param builder Builder
	 */
	private SFMessaging(final Builder builder) {
		if (builder.hasSfMsgType ) {
			this.sfMsgType = builder.sfMsgType;
			this.sfMeasureMsg = builder.sfMeasureMsg;
			this.hasSfMeasureMsg = builder.hasSfMeasureMsg;
			this.sfGetdataMsg = builder.sfGetdataMsg;
			this.hasSfGetdataMsg = builder.hasSfGetdataMsg;
			this.sfConfigMsg = builder.sfConfigMsg;
			this.hasSfConfigMsg = builder.hasSfConfigMsg;
			this.sfUserMsg = builder.sfUserMsg;
			this.hasSfUserMsg = builder.hasSfUserMsg;
			this.sfResponseMsg = builder.sfResponseMsg;
			this.hasSfResponseMsg = builder.hasSfResponseMsg;
			this.sfTestMsg = builder.sfTestMsg;
			this.hasSfTestMsg = builder.hasSfTestMsg;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" sfMsgType:" + builder.hasSfMsgType + "");
		}
	}

	/**
	 * The Class MessageType.
	 */
	public static class MessageType {

		/** The Constant MeasureMsg. */
		public static final int MeasureMsg = 1;

		/** The Constant GetDataMsg. */
		public static final int GetDataMsg = 2;

		/** The Constant ConfigMsg. */
		public static final int ConfigMsg = 3;

		/** The Constant UserProvMsg. */
		public static final int UserProvMsg = 4;

		/** The Constant ResponseMsg. */
		public static final int ResponseMsg = 5;

		/** The Constant TestMsg. */
		public static final int TestMsg = 6;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 1) {
				retValue = "MeasureMsg";

			} else if (value == 2) {
				retValue = "GetDataMsg";

			} else if (value == 3) {
				retValue = "ConfigMsg";

			} else if (value == 4) {
				retValue = "UserProvMsg";

			} else if (value == 5) {
				retValue = "ResponseMsg";

			} else if (value == 6) {
				retValue = "TestMsg";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The sf msg type. */
		private int sfMsgType;

		/** The has sf msg type. */
		private boolean hasSfMsgType = false;

		/** The sf measure msg. */
		private Measure sfMeasureMsg;

		/** The has sf measure msg. */
		private boolean hasSfMeasureMsg = false;

		/** The sf getdata msg. */
		private GetData sfGetdataMsg;

		/** The has sf getdata msg. */
		private boolean hasSfGetdataMsg = false;

		/** The sf config msg. */
		private ConfigMessage sfConfigMsg;

		/** The has sf config msg. */
		private boolean hasSfConfigMsg = false;

		/** The sf user msg. */
		private UserMessage sfUserMsg;

		/** The has sf user msg. */
		private boolean hasSfUserMsg = false;

		/** The sf response msg. */
		private Response sfResponseMsg;

		/** The has sf response msg. */
		private boolean hasSfResponseMsg = false;

		/** The sf test msg. */
		private Test sfTestMsg;

		/** The has sf test msg. */
		private boolean hasSfTestMsg = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setSfMsgType.
		 * @param sfMsgType int
		 * @return Builder
		 */
		public Builder setSfMsgType(final int sfMsgType) {
			this.sfMsgType = sfMsgType;
			this.hasSfMsgType = true;
			return this;
		}

		/**
		 * Method setSfMeasureMsg.
		 * @param sfMeasureMsg Measure
		 * @return Builder
		 */
		public Builder setSfMeasureMsg(final Measure sfMeasureMsg) {
			this.sfMeasureMsg = sfMeasureMsg;
			this.hasSfMeasureMsg = true;
			return this;
		}

		/**
		 * Method setSfGetdataMsg.
		 * @param sfGetdataMsg GetData
		 * @return Builder
		 */
		public Builder setSfGetdataMsg(final GetData sfGetdataMsg) {
			this.sfGetdataMsg = sfGetdataMsg;
			this.hasSfGetdataMsg = true;
			return this;
		}

		/**
		 * Method setSfConfigMsg.
		 * @param sfConfigMsg ConfigMessage
		 * @return Builder
		 */
		public Builder setSfConfigMsg(final ConfigMessage sfConfigMsg) {
			this.sfConfigMsg = sfConfigMsg;
			this.hasSfConfigMsg = true;
			return this;
		}

		/**
		 * Method setSfUserMsg.
		 * @param sfUserMsg UserMessage
		 * @return Builder
		 */
		public Builder setSfUserMsg(final UserMessage sfUserMsg) {
			this.sfUserMsg = sfUserMsg;
			this.hasSfUserMsg = true;
			return this;
		}

		/**
		 * Method setSfResponseMsg.
		 * @param sfResponseMsg Response
		 * @return Builder
		 */
		public Builder setSfResponseMsg(final Response sfResponseMsg) {
			this.sfResponseMsg = sfResponseMsg;
			this.hasSfResponseMsg = true;
			return this;
		}

		/**
		 * Method setSfTestMsg.
		 * @param sfTestMsg Test
		 * @return Builder
		 */
		public Builder setSfTestMsg(final Test sfTestMsg) {
			this.sfTestMsg = sfTestMsg;
			this.hasSfTestMsg = true;
			return this;
		}

		/**
		 * Method build.
		 * @return SFMessaging
		 */
		public SFMessaging build() {
			return new SFMessaging(this);
		}
	}

	/**
	 * Method getSfMsgType.
	 * @return int
	 */
	public int getSfMsgType() {
		return sfMsgType;
	}

	/**
	 * Method getSfMeasureMsg.
	 * @return Measure
	 */
	public Measure getSfMeasureMsg() {
		return sfMeasureMsg;
	}

	/**
	 * Method hasSfMeasureMsg.
	 * @return boolean
	 */
	public boolean hasSfMeasureMsg() {
		return hasSfMeasureMsg;
	}

	/**
	 * Method getSfGetdataMsg.
	 * @return GetData
	 */
	public GetData getSfGetdataMsg() {
		return sfGetdataMsg;
	}

	/**
	 * Method hasSfGetdataMsg.
	 * @return boolean
	 */
	public boolean hasSfGetdataMsg() {
		return hasSfGetdataMsg;
	}

	/**
	 * Method getSfConfigMsg.
	 * @return ConfigMessage
	 */
	public ConfigMessage getSfConfigMsg() {
		return sfConfigMsg;
	}

	/**
	 * Method hasSfConfigMsg.
	 * @return boolean
	 */
	public boolean hasSfConfigMsg() {
		return hasSfConfigMsg;
	}

	/**
	 * Method getSfUserMsg.
	 * @return UserMessage
	 */
	public UserMessage getSfUserMsg() {
		return sfUserMsg;
	}

	/**
	 * Method hasSfUserMsg.
	 * @return boolean
	 */
	public boolean hasSfUserMsg() {
		return hasSfUserMsg;
	}

	/**
	 * Method getSfResponseMsg.
	 * @return Response
	 */
	public Response getSfResponseMsg() {
		return sfResponseMsg;
	}

	/**
	 * Method hasSfResponseMsg.
	 * @return boolean
	 */
	public boolean hasSfResponseMsg() {
		return hasSfResponseMsg;
	}

	/**
	 * Method getSfTestMsg.
	 * @return Test
	 */
	public Test getSfTestMsg() {
		return sfTestMsg;
	}

	/**
	 * Method hasSfTestMsg.
	 * @return boolean
	 */
	public boolean hasSfTestMsg() {
		return hasSfTestMsg;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "sfMsgType = " + this.sfMsgType + TAB;
		if(hasSfMeasureMsg) retValue += "sfMeasureMsg = " + this.sfMeasureMsg + TAB;
		if(hasSfGetdataMsg) retValue += "sfGetdataMsg = " + this.sfGetdataMsg + TAB;
		if(hasSfConfigMsg) retValue += "sfConfigMsg = " + this.sfConfigMsg + TAB;
		if(hasSfUserMsg) retValue += "sfUserMsg = " + this.sfUserMsg + TAB;
		if(hasSfResponseMsg) retValue += "sfResponseMsg = " + this.sfResponseMsg + TAB;
		if(hasSfTestMsg) retValue += "sfTestMsg = " + this.sfTestMsg + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSfMsgType, sfMsgType);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasSfMeasureMsg) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSfMeasureMsg, sfMeasureMsg.computeSize());
		if(hasSfGetdataMsg) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSfGetdataMsg, sfGetdataMsg.computeSize());
		if(hasSfConfigMsg) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSfConfigMsg, sfConfigMsg.computeSize());
		if(hasSfUserMsg) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSfUserMsg, sfUserMsg.computeSize());
		if(hasSfResponseMsg) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSfResponseMsg, sfResponseMsg.computeSize());
		if(hasSfTestMsg) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSfTestMsg, sfTestMsg.computeSize());

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeInt(fieldNumberSfMsgType, sfMsgType);


		if(hasSfMeasureMsg)
		{
			writer.writeMessage(fieldNumberSfMeasureMsg, sfMeasureMsg.computeSize());
			sfMeasureMsg.writeFields(writer);
		}
		if(hasSfGetdataMsg)
		{
			writer.writeMessage(fieldNumberSfGetdataMsg, sfGetdataMsg.computeSize()); sfGetdataMsg.writeFields(writer); }
		if (hasSfConfigMsg) {
			writer.writeMessage(fieldNumberSfConfigMsg, sfConfigMsg.computeSize());
			sfConfigMsg.writeFields(writer);
		}
		if (hasSfUserMsg) {
			writer.writeMessage(fieldNumberSfUserMsg, sfUserMsg.computeSize());
			sfUserMsg.writeFields(writer);
		}
		if (hasSfResponseMsg) {
			writer.writeMessage(fieldNumberSfResponseMsg, sfResponseMsg.computeSize());
			sfResponseMsg.writeFields(writer);
		}


		if (hasSfTestMsg) {
			writer.writeMessage(fieldNumberSfTestMsg, sfTestMsg.computeSize());
			sfTestMsg.writeFields(writer);
		}
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return SFMessaging
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	/*static SFMessaging parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = SFMessaging.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}*/

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberSfMsgType) {
			builder.setSfMsgType(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberSfMeasureMsg) {
			java.util.Vector vcSfMeasureMsg = reader.readMessages(fieldNumberSfMeasureMsg);
			for (int i = 0; i < vcSfMeasureMsg.size(); i++) {
				byte[] eachBinData = (byte[]) vcSfMeasureMsg.elementAt(i);
				Measure.Builder builderSfMeasureMsg = Measure.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolSfMeasureMsg = true;
				int nestedFieldSfMeasureMsg = -1;
				while (boolSfMeasureMsg) {
					nestedFieldSfMeasureMsg = getNextFieldNumber(innerInputReader);
					boolSfMeasureMsg = Measure.populateBuilderWithField(innerInputReader, builderSfMeasureMsg, nestedFieldSfMeasureMsg);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setSfMeasureMsg(builderSfMeasureMsg.build());
			}

		} else if (fieldNumber == fieldNumberSfGetdataMsg) {
			java.util.Vector vcSfGetdataMsg = reader.readMessages(fieldNumberSfGetdataMsg);
			for (int i = 0; i < vcSfGetdataMsg.size(); i++) {
				byte[] eachBinData = (byte[]) vcSfGetdataMsg.elementAt(i);
				GetData.Builder builderSfGetdataMsg = GetData.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolSfGetdataMsg = true;
				int nestedFieldSfGetdataMsg = -1;
				while (boolSfGetdataMsg) {
					nestedFieldSfGetdataMsg = getNextFieldNumber(innerInputReader);
					boolSfGetdataMsg = GetData.populateBuilderWithField(innerInputReader, builderSfGetdataMsg, nestedFieldSfGetdataMsg);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setSfGetdataMsg(builderSfGetdataMsg.build());
			}

		} else if (fieldNumber == fieldNumberSfConfigMsg) {
			java.util.Vector vcSfConfigMsg = reader.readMessages(fieldNumberSfConfigMsg);
			for (int i = 0; i < vcSfConfigMsg.size(); i++) {
				byte[] eachBinData = (byte[]) vcSfConfigMsg.elementAt(i);
				ConfigMessage.Builder builderSfConfigMsg = ConfigMessage.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolSfConfigMsg = true;
				int nestedFieldSfConfigMsg = -1;
				while (boolSfConfigMsg) {
					nestedFieldSfConfigMsg = getNextFieldNumber(innerInputReader);
					boolSfConfigMsg = ConfigMessage.populateBuilderWithField(innerInputReader, builderSfConfigMsg, nestedFieldSfConfigMsg);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setSfConfigMsg(builderSfConfigMsg.build());
			}

		} else if (fieldNumber == fieldNumberSfUserMsg) {
			java.util.Vector vcSfUserMsg = reader.readMessages(fieldNumberSfUserMsg);
			for (int i = 0; i < vcSfUserMsg.size(); i++) {
				byte[] eachBinData = (byte[]) vcSfUserMsg.elementAt(i);
				UserMessage.Builder builderSfUserMsg = UserMessage.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolSfUserMsg = true;
				int nestedFieldSfUserMsg = -1;
				while (boolSfUserMsg) {
					nestedFieldSfUserMsg = getNextFieldNumber(innerInputReader);
					boolSfUserMsg = UserMessage.populateBuilderWithField(innerInputReader, builderSfUserMsg, nestedFieldSfUserMsg);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setSfUserMsg(builderSfUserMsg.build());
			}

		} else if (fieldNumber == fieldNumberSfResponseMsg) {
			java.util.Vector vcSfResponseMsg = reader.readMessages(fieldNumberSfResponseMsg);
			for (int i = 0; i < vcSfResponseMsg.size(); i++) {
				byte[] eachBinData = (byte[]) vcSfResponseMsg.elementAt(i);
				Response.Builder builderSfResponseMsg = Response.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolSfResponseMsg = true;
				int nestedFieldSfResponseMsg = -1;
				while (boolSfResponseMsg) {
					nestedFieldSfResponseMsg = getNextFieldNumber(innerInputReader);
					boolSfResponseMsg = Response.populateBuilderWithField(innerInputReader, builderSfResponseMsg, nestedFieldSfResponseMsg);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setSfResponseMsg(builderSfResponseMsg.build());
			}

		} else if (fieldNumber == fieldNumberSfTestMsg) {
			java.util.Vector vcSfTestMsg = reader.readMessages(fieldNumberSfTestMsg);
			for (int i = 0; i < vcSfTestMsg.size(); i++) {
				byte[] eachBinData = (byte[]) vcSfTestMsg.elementAt(i);
				Test.Builder builderSfTestMsg = Test.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolSfTestMsg = true;
				int nestedFieldSfTestMsg = -1;
				while (boolSfTestMsg) {
					nestedFieldSfTestMsg = getNextFieldNumber(innerInputReader);
					boolSfTestMsg = Test.populateBuilderWithField(innerInputReader, builderSfTestMsg, nestedFieldSfTestMsg);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setSfTestMsg(builderSfTestMsg.build());
			}

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	/*public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		SFMessaging.unknownTagHandler = unknownTagHandler;
	}

	*//**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return SFMessaging
	 * @throws IOException Signals that an I/O exception has occurred.
	 *//*
	public static SFMessaging parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	*//**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return SFMessaging
	 * @throws IOException Signals that an I/O exception has occurred.
	 *//*
	public static SFMessaging parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	*//**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return SFMessaging
	 * @throws IOException Signals that an I/O exception has occurred.
	 *//*
	public static SFMessaging parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}*/
}