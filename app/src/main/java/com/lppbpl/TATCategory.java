/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Mon Feb 25 10:01:13 IST 2013.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class TATCategory.
 */
public final class TATCategory extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The id. */
	private final long id;

	/** The Constant fieldNumberId. */
	private static final int fieldNumberId = 1;

	/** The name. */
	private final String name;

	/** The Constant fieldNumberName. */
	private static final int fieldNumberName = 2;

	/** The tat. */
	private final long tat;

	/** The Constant fieldNumberTat. */
	private static final int fieldNumberTat = 3;

	/** The amount. */
	private final long amount;

	/** The Constant fieldNumberAmount. */
	private static final int fieldNumberAmount = 4;

	/** The has amount. */
	private final boolean hasAmount;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for TATCategory.
	 * @param builder Builder
	 */
	private TATCategory(final Builder builder) {
		if (builder.hasId && builder.hasName && builder.hasTat ) {
			this.id = builder.id;
			this.name = builder.name;
			this.tat = builder.tat;
			this.amount = builder.amount;
			this.hasAmount = builder.hasAmount;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" id:" + builder.hasId + " name:" + builder.hasName + " tat:" + builder.hasTat + "");
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The id. */
		private long id;

		/** The has id. */
		private boolean hasId = false;

		/** The name. */
		private String name;

		/** The has name. */
		private boolean hasName = false;

		/** The tat. */
		private long tat;

		/** The has tat. */
		private boolean hasTat = false;

		/** The amount. */
		private long amount;

		/** The has amount. */
		private boolean hasAmount = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setId.
		 * @param id long
		 * @return Builder
		 */
		public Builder setId(final long id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		/**
		 * Method setName.
		 * @param name String
		 * @return Builder
		 */
		public Builder setName(final String name) {
			this.name = name;
			this.hasName = true;
			return this;
		}

		/**
		 * Method setTat.
		 * @param tat long
		 * @return Builder
		 */
		public Builder setTat(final long tat) {
			this.tat = tat;
			this.hasTat = true;
			return this;
		}

		/**
		 * Method setAmount.
		 * @param amount long
		 * @return Builder
		 */
		public Builder setAmount(final long amount) {
			this.amount = amount;
			this.hasAmount = true;
			return this;
		}

		/**
		 * Method build.
		 * @return TATCategory
		 */
		public TATCategory build() {
			return new TATCategory(this);
		}
	}

	/**
	 * Method getId.
	 * @return long
	 */
	public long getId() {
		return id;
	}

	/**
	 * Method getName.
	 * @return String
	 */
	public String getName() {
		return name;
	}

	/**
	 * Method getTat.
	 * @return long
	 */
	public long getTat() {
		return tat;
	}

	/**
	 * Method getAmount.
	 * @return long
	 */
	public long getAmount() {
		return amount;
	}

	/**
	 * Method hasAmount.
	 * @return boolean
	 */
	public boolean hasAmount() {
		return hasAmount;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "id = " + this.id + TAB;
		retValue += "name = " + this.name + TAB;
		retValue += "tat = " + this.tat + TAB;
		if(hasAmount) retValue += "amount = " + this.amount + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeLongSize(fieldNumberId, id);
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberName, name);
		totalSize += ComputeSizeUtil.computeLongSize(fieldNumberTat, tat);
		if(hasAmount) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberAmount, amount);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeLong(fieldNumberId, id);
		writer.writeString(fieldNumberName, name);
		writer.writeLong(fieldNumberTat, tat);
		if(hasAmount) writer.writeLong(fieldNumberAmount, amount);
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return TATCategory
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static TATCategory parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = TATCategory.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberId) {
			builder.setId(reader.readLong(fieldNumber));

		} else if (fieldNumber == fieldNumberName) {
			builder.setName(reader.readString(fieldNumber));

		} else if (fieldNumber == fieldNumberTat) {
			builder.setTat(reader.readLong(fieldNumber));

		} else if (fieldNumber == fieldNumberAmount) {
			builder.setAmount(reader.readLong(fieldNumber));

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		TATCategory.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return TATCategory
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static TATCategory parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return TATCategory
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static TATCategory parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return TATCategory
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static TATCategory parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}