/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Tue May 22 15:05:13 IST 2012.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class EcgData.
 */
public final class EcgData extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The mul lead. */
	private final java.util.Vector mulLead;

	/** The Constant fieldNumberMulLead. */
	private static final int fieldNumberMulLead = 1;

	/** The duration. */
	private final int duration;

	/** The Constant fieldNumberDuration. */
	private static final int fieldNumberDuration = 2;

	/** The ecg symptoms. */
	private final java.util.Vector ecgSymptoms;

	/** The Constant fieldNumberEcgSymptoms. */
	private static final int fieldNumberEcgSymptoms = 3;

	/** The annotation txt. */
	private final String annotationTxt;

	/** The Constant fieldNumberAnnotationTxt. */
	private static final int fieldNumberAnnotationTxt = 4;

	/** The has annotation txt. */
	private final boolean hasAnnotationTxt;

	/** The measurement id. */
	private final int measurementId;

	/** The Constant fieldNumberMeasurementId. */
	private static final int fieldNumberMeasurementId = 100;

	/** The has measurement id. */
	private final boolean hasMeasurementId;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for EcgData.
	 * @param builder Builder
	 */
	private EcgData(final Builder builder) {
		if (builder.hasDuration ) {
			this.mulLead = builder.mulLead;
			this.duration = builder.duration;
			this.ecgSymptoms = builder.ecgSymptoms;
			this.annotationTxt = builder.annotationTxt;
			this.hasAnnotationTxt = builder.hasAnnotationTxt;
			this.measurementId = builder.measurementId;
			this.hasMeasurementId = builder.hasMeasurementId;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" duration:" + builder.hasDuration + "");
		}
	}

	/**
	 * The Class EcgSymptoms.
	 */
	public static class EcgSymptoms {

		/** The Constant ChestPain. */
		public static final int ChestPain = 1;

		/** The Constant Palpitations. */
		public static final int Palpitations = 2;

		/** The Constant Sweating. */
		public static final int Sweating = 3;

		/** The Constant Dizziness. */
		public static final int Dizziness = 4;

		/** The Constant Anxiety. */
		public static final int Anxiety = 5;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 1) {
				retValue = "ChestPain";

			} else if (value == 2) {
				retValue = "Palpitations";

			} else if (value == 3) {
				retValue = "Sweating";

			} else if (value == 4) {
				retValue = "Dizziness";

			} else if (value == 5) {
				retValue = "Anxiety";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The mul lead. */
		private java.util.Vector mulLead = new java.util.Vector();

		/** The has mul lead. */
		private boolean hasMulLead = false;

		/** The duration. */
		private int duration;

		/** The has duration. */
		private boolean hasDuration = false;

		/** The ecg symptoms. */
		private java.util.Vector ecgSymptoms = new java.util.Vector();

		/** The has ecg symptoms. */
		private boolean hasEcgSymptoms = false;

		/** The annotation txt. */
		private String annotationTxt;

		/** The has annotation txt. */
		private boolean hasAnnotationTxt = false;

		/** The measurement id. */
		private int measurementId;

		/** The has measurement id. */
		private boolean hasMeasurementId = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setMulLead.
		 * @param mulLead java.util.Vector
		 * @return Builder
		 */
		public Builder setMulLead(final java.util.Vector mulLead) {
			if(!hasMulLead) {
				hasMulLead = true;
			}
			this.mulLead = mulLead;
			return this;
		}


		/**
		 * Method addElementMulLead.
		 * @param element EcgMultipleLead
		 * @return Builder
		 */
		public Builder addElementMulLead(final EcgMultipleLead element) {
			if(!hasMulLead) {
				hasMulLead = true;
			}
			mulLead.addElement(element);
			return this;
		}

		/**
		 * Method setDuration.
		 * @param duration int
		 * @return Builder
		 */
		public Builder setDuration(final int duration) {
			this.duration = duration;
			this.hasDuration = true;
			return this;
		}

		/**
		 * Method setEcgSymptoms.
		 * @param ecgSymptoms java.util.Vector
		 * @return Builder
		 */
		public Builder setEcgSymptoms(final java.util.Vector ecgSymptoms) {
			if(!hasEcgSymptoms) {
				hasEcgSymptoms = true;
			}
			this.ecgSymptoms = ecgSymptoms;
			return this;
		}


		/**
		 * Method addElementEcgSymptoms.
		 * @param element int
		 * @return Builder
		 */
		public Builder addElementEcgSymptoms(final int element) {
			if(!hasEcgSymptoms) {
				hasEcgSymptoms = true;
			}
			ecgSymptoms.addElement(new Integer(element));
			return this;
		}

		/**
		 * Method setAnnotationTxt.
		 * @param annotationTxt String
		 * @return Builder
		 */
		public Builder setAnnotationTxt(final String annotationTxt) {
			this.annotationTxt = annotationTxt;
			this.hasAnnotationTxt = true;
			return this;
		}

		/**
		 * Method setMeasurementId.
		 * @param measurementId int
		 * @return Builder
		 */
		public Builder setMeasurementId(final int measurementId) {
			this.measurementId = measurementId;
			this.hasMeasurementId = true;
			return this;
		}

		/**
		 * Method build.
		 * @return EcgData
		 */
		public EcgData build() {
			return new EcgData(this);
		}
	}

	/**
	 * Method getMulLead.
	 * @return java.util.Vector
	 */
	public java.util.Vector getMulLead() {
		return mulLead;
	}

	/**
	 * Method getDuration.
	 * @return int
	 */
	public int getDuration() {
		return duration;
	}

	/**
	 * Method getEcgSymptoms.
	 * @return java.util.Vector
	 */
	public java.util.Vector getEcgSymptoms() {
		return ecgSymptoms;
	}

	/**
	 * Method getAnnotationTxt.
	 * @return String
	 */
	public String getAnnotationTxt() {
		return annotationTxt;
	}

	/**
	 * Method hasAnnotationTxt.
	 * @return boolean
	 */
	public boolean hasAnnotationTxt() {
		return hasAnnotationTxt;
	}

	/**
	 * Method getMeasurementId.
	 * @return int
	 */
	public int getMeasurementId() {
		return measurementId;
	}

	/**
	 * Method hasMeasurementId.
	 * @return boolean
	 */
	public boolean hasMeasurementId() {
		return hasMeasurementId;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "mulLead = " + this.mulLead + TAB;
		retValue += "duration = " + this.duration + TAB;
		retValue += "ecgSymptoms = " + this.ecgSymptoms + TAB;
		if(hasAnnotationTxt) retValue += "annotationTxt = " + this.annotationTxt + TAB;
		if(hasMeasurementId) retValue += "measurementId = " + this.measurementId + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberDuration, duration);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberEcgSymptoms, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, ecgSymptoms);
		if(hasAnnotationTxt) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberAnnotationTxt, annotationTxt);
		if(hasMeasurementId) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberMeasurementId, measurementId);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberMulLead, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, mulLead);

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeList(fieldNumberMulLead, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, mulLead);
		writer.writeInt(fieldNumberDuration, duration);
		writer.writeList(fieldNumberEcgSymptoms, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, ecgSymptoms);
		if(hasAnnotationTxt) writer.writeString(fieldNumberAnnotationTxt, annotationTxt);
		if(hasMeasurementId) writer.writeInt(fieldNumberMeasurementId, measurementId);
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return EcgData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static EcgData parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = EcgData.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberMulLead) {
			java.util.Vector vcMulLead = reader.readMessages(fieldNumberMulLead);
			for (int i = 0; i < vcMulLead.size(); i++) {
				byte[] eachBinData = (byte[]) vcMulLead.elementAt(i);
				EcgMultipleLead.Builder builderMulLead = EcgMultipleLead.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolMulLead = true;
				int nestedFieldMulLead = -1;
				while (boolMulLead) {
					nestedFieldMulLead = getNextFieldNumber(innerInputReader);
					boolMulLead = EcgMultipleLead.populateBuilderWithField(innerInputReader, builderMulLead, nestedFieldMulLead);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.addElementMulLead(builderMulLead.build());
			}

		} else if (fieldNumber == fieldNumberDuration) {
			builder.setDuration(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberEcgSymptoms) {
			builder.addElementEcgSymptoms(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberAnnotationTxt) {
			builder.setAnnotationTxt(reader.readString(fieldNumber));

		} else if (fieldNumber == fieldNumberMeasurementId) {
			builder.setMeasurementId(reader.readInt(fieldNumber));

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		EcgData.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return EcgData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static EcgData parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return EcgData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static EcgData parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return EcgData
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static EcgData parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}