/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Tue May 22 15:05:13 IST 2012.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class ActivityParams.
 */
public final class ActivityParams extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The act usr weight. */
	private final int actUsrWeight;

	/** The Constant fieldNumberActUsrWeight. */
	private static final int fieldNumberActUsrWeight = 1;

	/** The has act usr weight. */
	private final boolean hasActUsrWeight;

	/** The act usr height. */
	private final int actUsrHeight;

	/** The Constant fieldNumberActUsrHeight. */
	private static final int fieldNumberActUsrHeight = 2;

	/** The has act usr height. */
	private final boolean hasActUsrHeight;

	/** The act duration. */
	private final int actDuration;

	/** The Constant fieldNumberActDuration. */
	private static final int fieldNumberActDuration = 10;

	/** The has act duration. */
	private final boolean hasActDuration;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for ActivityParams.
	 * @param builder Builder
	 */
	private ActivityParams(final Builder builder) {
		if (true) {
			this.actUsrWeight = builder.actUsrWeight;
			this.hasActUsrWeight = builder.hasActUsrWeight;
			this.actUsrHeight = builder.actUsrHeight;
			this.hasActUsrHeight = builder.hasActUsrHeight;
			this.actDuration = builder.actDuration;
			this.hasActDuration = builder.hasActDuration;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				"");
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The act usr weight. */
		private int actUsrWeight;

		/** The has act usr weight. */
		private boolean hasActUsrWeight = false;

		/** The act usr height. */
		private int actUsrHeight;

		/** The has act usr height. */
		private boolean hasActUsrHeight = false;

		/** The act duration. */
		private int actDuration;

		/** The has act duration. */
		private boolean hasActDuration = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setActUsrWeight.
		 * @param actUsrWeight int
		 * @return Builder
		 */
		public Builder setActUsrWeight(final int actUsrWeight) {
			this.actUsrWeight = actUsrWeight;
			this.hasActUsrWeight = true;
			return this;
		}

		/**
		 * Method setActUsrHeight.
		 * @param actUsrHeight int
		 * @return Builder
		 */
		public Builder setActUsrHeight(final int actUsrHeight) {
			this.actUsrHeight = actUsrHeight;
			this.hasActUsrHeight = true;
			return this;
		}

		/**
		 * Method setActDuration.
		 * @param actDuration int
		 * @return Builder
		 */
		public Builder setActDuration(final int actDuration) {
			this.actDuration = actDuration;
			this.hasActDuration = true;
			return this;
		}

		/**
		 * Method build.
		 * @return ActivityParams
		 */
		public ActivityParams build() {
			return new ActivityParams(this);
		}
	}

	/**
	 * Method getActUsrWeight.
	 * @return int
	 */
	public int getActUsrWeight() {
		return actUsrWeight;
	}

	/**
	 * Method hasActUsrWeight.
	 * @return boolean
	 */
	public boolean hasActUsrWeight() {
		return hasActUsrWeight;
	}

	/**
	 * Method getActUsrHeight.
	 * @return int
	 */
	public int getActUsrHeight() {
		return actUsrHeight;
	}

	/**
	 * Method hasActUsrHeight.
	 * @return boolean
	 */
	public boolean hasActUsrHeight() {
		return hasActUsrHeight;
	}

	/**
	 * Method getActDuration.
	 * @return int
	 */
	public int getActDuration() {
		return actDuration;
	}

	/**
	 * Method hasActDuration.
	 * @return boolean
	 */
	public boolean hasActDuration() {
		return hasActDuration;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasActUsrWeight) retValue += "actUsrWeight = " + this.actUsrWeight + TAB;
		if(hasActUsrHeight) retValue += "actUsrHeight = " + this.actUsrHeight + TAB;
		if(hasActDuration) retValue += "actDuration = " + this.actDuration + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		if(hasActUsrWeight) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberActUsrWeight, actUsrWeight);
		if(hasActUsrHeight) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberActUsrHeight, actUsrHeight);
		if(hasActDuration) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberActDuration, actDuration);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasActUsrWeight) writer.writeInt(fieldNumberActUsrWeight, actUsrWeight);
		if(hasActUsrHeight) writer.writeInt(fieldNumberActUsrHeight, actUsrHeight);
		if(hasActDuration) writer.writeInt(fieldNumberActDuration, actDuration);
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return ActivityParams
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static ActivityParams parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = ActivityParams.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberActUsrWeight) {
			builder.setActUsrWeight(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberActUsrHeight) {
			builder.setActUsrHeight(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberActDuration) {
			builder.setActDuration(reader.readInt(fieldNumber));

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		ActivityParams.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return ActivityParams
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static ActivityParams parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return ActivityParams
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static ActivityParams parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return ActivityParams
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static ActivityParams parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}