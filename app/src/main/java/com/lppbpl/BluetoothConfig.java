/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Fri Oct 19 14:17:12 IST 2012.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class BluetoothConfig.
 */
public final class BluetoothConfig extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The config type. */
	private final int configType;

	/** The Constant fieldNumberConfigType. */
	private static final int fieldNumberConfigType = 10;

	/** The bt pin. */
	private final long btPin;

	/** The Constant fieldNumberBtPin. */
	private static final int fieldNumberBtPin = 20;

	/** The has bt pin. */
	private final boolean hasBtPin;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for BluetoothConfig.
	 * @param builder Builder
	 */
	private BluetoothConfig(final Builder builder) {
		if (builder.hasConfigType ) {
			this.configType = builder.configType;
			this.btPin = builder.btPin;
			this.hasBtPin = builder.hasBtPin;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				" configType:" + builder.hasConfigType + "");
		}
	}

	/**
	 * The Class BluetoothConfigType.
	 */
	public static class BluetoothConfigType {

		/** The Constant BTPinChange. */
		public static final int BTPinChange = 1;

		/**
		 * Method getStringValue.
		 * @param value int
		 * @return String
		 */
		public static String getStringValue(int value) {
			String retValue;

			if (value == 1) {
				retValue = "BTPinChange";

			} else {
				retValue = "";

			}

			return retValue;
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The config type. */
		private int configType;

		/** The has config type. */
		private boolean hasConfigType = false;

		/** The bt pin. */
		private long btPin;

		/** The has bt pin. */
		private boolean hasBtPin = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setConfigType.
		 * @param configType int
		 * @return Builder
		 */
		public Builder setConfigType(final int configType) {
			this.configType = configType;
			this.hasConfigType = true;
			return this;
		}

		/**
		 * Method setBtPin.
		 * @param btPin long
		 * @return Builder
		 */
		public Builder setBtPin(final long btPin) {
			this.btPin = btPin;
			this.hasBtPin = true;
			return this;
		}

		/**
		 * Method build.
		 * @return BluetoothConfig
		 */
		public BluetoothConfig build() {
			return new BluetoothConfig(this);
		}
	}

	/**
	 * Method getConfigType.
	 * @return int
	 */
	public int getConfigType() {
		return configType;
	}

	/**
	 * Method getBtPin.
	 * @return long
	 */
	public long getBtPin() {
		return btPin;
	}

	/**
	 * Method hasBtPin.
	 * @return boolean
	 */
	public boolean hasBtPin() {
		return hasBtPin;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "configType = " + this.configType + TAB;
		if(hasBtPin) retValue += "btPin = " + this.btPin + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberConfigType, configType);
		if(hasBtPin) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberBtPin, btPin);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeInt(fieldNumberConfigType, configType);
		if(hasBtPin) writer.writeLong(fieldNumberBtPin, btPin);
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return BluetoothConfig
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static BluetoothConfig parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = BluetoothConfig.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberConfigType:
				builder.setConfigType(reader.readInt(fieldNumber));
				break;
			case fieldNumberBtPin:
				builder.setBtPin(reader.readLong(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		BluetoothConfig.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return BluetoothConfig
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static BluetoothConfig parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return BluetoothConfig
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static BluetoothConfig parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return BluetoothConfig
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static BluetoothConfig parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}