/*
 *
 */
package com.lppbpl;
// Generated by proto2javame, Fri Oct 19 14:17:12 IST 2012.

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

import java.io.IOException;
import java.io.InputStream;

// TODO: Auto-generated Javadoc
/**
 * The Class MeasurementConfig.
 */
public final class MeasurementConfig extends AbstractOutputWriter {

	/** The unknown tag handler. */
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	/** The ecg leads. */
	private final java.util.Vector ecgLeads;

	/** The Constant fieldNumberEcgLeads. */
	private static final int fieldNumberEcgLeads = 1;

	/** The bg wait time. */
	private final long bgWaitTime;

	/** The Constant fieldNumberBgWaitTime. */
	private static final int fieldNumberBgWaitTime = 10;

	/** The has bg wait time. */
	private final boolean hasBgWaitTime;

	/** The current time. */
	private final TimeData currentTime;

	/** The Constant fieldNumberCurrentTime. */
	private static final int fieldNumberCurrentTime = 20;

	/** The has current time. */
	private final boolean hasCurrentTime;


	/**
	 * Method newBuilder.
	 * @return Builder
	 */
	public static Builder newBuilder() {
		return new Builder();
	}

	/**
	 * Constructor for MeasurementConfig.
	 * @param builder Builder
	 */
	private MeasurementConfig(final Builder builder) {
		if (true) {
			this.ecgLeads = builder.ecgLeads;
			this.bgWaitTime = builder.bgWaitTime;
			this.hasBgWaitTime = builder.hasBgWaitTime;
			this.currentTime = builder.currentTime;
			this.hasCurrentTime = builder.hasCurrentTime;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " +
				"");
		}
	}

	/**
	 * The Class Builder.
	 */
	public static class Builder {

		/** The ecg leads. */
		private java.util.Vector ecgLeads = new java.util.Vector();

		/** The has ecg leads. */
		private boolean hasEcgLeads = false;

		/** The bg wait time. */
		private long bgWaitTime;

		/** The has bg wait time. */
		private boolean hasBgWaitTime = false;

		/** The current time. */
		private TimeData currentTime;

		/** The has current time. */
		private boolean hasCurrentTime = false;


		/**
		 * Instantiates a new builder.
		 */
		private Builder() {
		}

		/**
		 * Method setEcgLeads.
		 * @param ecgLeads java.util.Vector
		 * @return Builder
		 */
		public Builder setEcgLeads(final java.util.Vector ecgLeads) {
			if(!hasEcgLeads) {
				hasEcgLeads = true;
			}
			this.ecgLeads = ecgLeads;
			return this;
		}


		/**
		 * Method addElementEcgLeads.
		 * @param element int
		 * @return Builder
		 */
		public Builder addElementEcgLeads(final int element) {
			if(!hasEcgLeads) {
				hasEcgLeads = true;
			}
			ecgLeads.addElement(new Integer(element));
			return this;
		}

		/**
		 * Method setBgWaitTime.
		 * @param bgWaitTime long
		 * @return Builder
		 */
		public Builder setBgWaitTime(final long bgWaitTime) {
			this.bgWaitTime = bgWaitTime;
			this.hasBgWaitTime = true;
			return this;
		}

		/**
		 * Method setCurrentTime.
		 * @param currentTime TimeData
		 * @return Builder
		 */
		public Builder setCurrentTime(final TimeData currentTime) {
			this.currentTime = currentTime;
			this.hasCurrentTime = true;
			return this;
		}

		/**
		 * Method build.
		 * @return MeasurementConfig
		 */
		public MeasurementConfig build() {
			return new MeasurementConfig(this);
		}
	}

	/**
	 * Method getEcgLeads.
	 * @return java.util.Vector
	 */
	public java.util.Vector getEcgLeads() {
		return ecgLeads;
	}

	/**
	 * Method getBgWaitTime.
	 * @return long
	 */
	public long getBgWaitTime() {
		return bgWaitTime;
	}

	/**
	 * Method hasBgWaitTime.
	 * @return boolean
	 */
	public boolean hasBgWaitTime() {
		return hasBgWaitTime;
	}

	/**
	 * Method getCurrentTime.
	 * @return TimeData
	 */
	public TimeData getCurrentTime() {
		return currentTime;
	}

	/**
	 * Method hasCurrentTime.
	 * @return boolean
	 */
	public boolean hasCurrentTime() {
		return hasCurrentTime;
	}

	/**
	 * Method toString.
	 * @return String
	 */
	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "ecgLeads = " + this.ecgLeads + TAB;
		if(hasBgWaitTime) retValue += "bgWaitTime = " + this.bgWaitTime + TAB;
		if(hasCurrentTime) retValue += "currentTime = " + this.currentTime + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	/**
	 * Method computeSize.
	 * @return int
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#computeSize()
	 */
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberEcgLeads, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, ecgLeads);
		if(hasBgWaitTime) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberBgWaitTime, bgWaitTime);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	/**
	 * Method computeNestedMessageSize.
	 * @return int
	 */
	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasCurrentTime) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberCurrentTime, currentTime.computeSize());

		return messageSize;
	}

	// Override
	/**
	 * Method writeFields.
	 *
	 * @param writer OutputWriter
	 * @throws IOException Signals that an I/O exception has occurred.
	 * @see net.jarlehansen.protobuf.javame.CustomListWriter#writeFields(OutputWriter)
	 */
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeList(fieldNumberEcgLeads, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, ecgLeads);
		if(hasBgWaitTime) writer.writeLong(fieldNumberBgWaitTime, bgWaitTime);
		if(hasCurrentTime) { writer.writeMessage(fieldNumberCurrentTime, currentTime.computeSize()); currentTime.writeFields(writer); }
	}

	/**
	 * Method parseFields.
	 *
	 * @param reader InputReader
	 * @return MeasurementConfig
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static MeasurementConfig parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Builder builder = MeasurementConfig.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	/**
	 * Method getNextFieldNumber.
	 *
	 * @param reader InputReader
	 * @return int
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	/**
	 * Method populateBuilderWithField.
	 *
	 * @param reader InputReader
	 * @param builder Builder
	 * @param fieldNumber int
	 * @return boolean
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		if (fieldNumber == fieldNumberEcgLeads) {
			builder.addElementEcgLeads(reader.readInt(fieldNumber));

		} else if (fieldNumber == fieldNumberBgWaitTime) {
			builder.setBgWaitTime(reader.readLong(fieldNumber));

		} else if (fieldNumber == fieldNumberCurrentTime) {
			java.util.Vector vcCurrentTime = reader.readMessages(fieldNumberCurrentTime);
			for (int i = 0; i < vcCurrentTime.size(); i++) {
				byte[] eachBinData = (byte[]) vcCurrentTime.elementAt(i);
				TimeData.Builder builderCurrentTime = TimeData.newBuilder();
				InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
				boolean boolCurrentTime = true;
				int nestedFieldCurrentTime = -1;
				while (boolCurrentTime) {
					nestedFieldCurrentTime = getNextFieldNumber(innerInputReader);
					boolCurrentTime = TimeData.populateBuilderWithField(innerInputReader, builderCurrentTime, nestedFieldCurrentTime);
				}
				eachBinData = null;
				innerInputReader = null;
				builder.setCurrentTime(builderCurrentTime.build());
			}

		} else {
			fieldFound = false;
		}
		return fieldFound;
	}

	/**
	 * Method setUnknownTagHandler.
	 * @param unknownTagHandler UnknownTagHandler
	 */
	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		MeasurementConfig.unknownTagHandler = unknownTagHandler;
	}

	/**
	 * Method parseFrom.
	 *
	 * @param data byte[]
	 * @return MeasurementConfig
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static MeasurementConfig parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	/**
	 * Method parseFrom.
	 *
	 * @param inputStream InputStream
	 * @return MeasurementConfig
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static MeasurementConfig parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	/**
	 * Method parseDelimitedFrom.
	 *
	 * @param inputStream InputStream
	 * @return MeasurementConfig
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public static MeasurementConfig parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}